/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.CountResultDto;
import org.camunda.rest.model.VariableInstanceDto;
import org.camunda.rest.model.VariableInstanceQueryDto;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.io.File;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface VariableInstanceApi {
    /**
     * Get Variable Instance
     * Retrieves a variable by id.
     *
     * @param id The id of the variable instance. (required)
     * @param deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @return VariableInstanceDto
     */
    @Get(uri="/variable-instance/{id}")
    @Consumes({"application/json"})
    Mono<VariableInstanceDto> getVariableInstance(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="deserializeValue") @Nullable Boolean deserializeValue
    );

    /**
     * Get Variable Instance (Binary)
     * Retrieves the content of a variable by id. Applicable for byte array and file variables.
     *
     * @param id The id of the variable instance. (required)
     * @return File
     */
    @Get(uri="/variable-instance/{id}/data")
    @Consumes({"application/octet-stream", "application/json"})
    Mono<File> getVariableInstanceBinary(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Variable Instances
     * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
     *
     * @param variableName Filter by variable instance name. (optional)
     * @param variableNameLike Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)
     * @param processInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param executionIdIn Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)
     * @param caseInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)
     * @param caseExecutionIdIn Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)
     * @param taskIdIn Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)
     * @param batchIdIn Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)
     * @param activityInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)
     * @param tenantIdIn Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param variableValues Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param variableScopeIdIn Only include variable instances which belong to one of passed scope ids. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @return List&lt;VariableInstanceDto&gt;
     */
    @Get(uri="/variable-instance")
    @Consumes({"application/json"})
    Mono<List<VariableInstanceDto>> getVariableInstances(
        @QueryValue(value="variableName") @Nullable String variableName, 
        @QueryValue(value="variableNameLike") @Nullable String variableNameLike, 
        @QueryValue(value="processInstanceIdIn") @Nullable String processInstanceIdIn, 
        @QueryValue(value="executionIdIn") @Nullable String executionIdIn, 
        @QueryValue(value="caseInstanceIdIn") @Nullable String caseInstanceIdIn, 
        @QueryValue(value="caseExecutionIdIn") @Nullable String caseExecutionIdIn, 
        @QueryValue(value="taskIdIn") @Nullable String taskIdIn, 
        @QueryValue(value="batchIdIn") @Nullable String batchIdIn, 
        @QueryValue(value="activityInstanceIdIn") @Nullable String activityInstanceIdIn, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="variableValues") @Nullable String variableValues, 
        @QueryValue(value="variableNamesIgnoreCase") @Nullable Boolean variableNamesIgnoreCase, 
        @QueryValue(value="variableValuesIgnoreCase") @Nullable Boolean variableValuesIgnoreCase, 
        @QueryValue(value="variableScopeIdIn") @Nullable String variableScopeIdIn, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @QueryValue(value="deserializeValues") @Nullable Boolean deserializeValues
    );

    /**
     * Get Variable Instance Count
     * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query/) method.
     *
     * @param variableName Filter by variable instance name. (optional)
     * @param variableNameLike Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)
     * @param processInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param executionIdIn Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)
     * @param caseInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)
     * @param caseExecutionIdIn Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)
     * @param taskIdIn Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)
     * @param batchIdIn Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)
     * @param activityInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)
     * @param tenantIdIn Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param variableValues Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param variableValuesIgnoreCase Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param variableScopeIdIn Only include variable instances which belong to one of passed scope ids. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @return CountResultDto
     */
    @Get(uri="/variable-instance/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getVariableInstancesCount(
        @QueryValue(value="variableName") @Nullable String variableName, 
        @QueryValue(value="variableNameLike") @Nullable String variableNameLike, 
        @QueryValue(value="processInstanceIdIn") @Nullable String processInstanceIdIn, 
        @QueryValue(value="executionIdIn") @Nullable String executionIdIn, 
        @QueryValue(value="caseInstanceIdIn") @Nullable String caseInstanceIdIn, 
        @QueryValue(value="caseExecutionIdIn") @Nullable String caseExecutionIdIn, 
        @QueryValue(value="taskIdIn") @Nullable String taskIdIn, 
        @QueryValue(value="batchIdIn") @Nullable String batchIdIn, 
        @QueryValue(value="activityInstanceIdIn") @Nullable String activityInstanceIdIn, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="variableValues") @Nullable String variableValues, 
        @QueryValue(value="variableNamesIgnoreCase") @Nullable Boolean variableNamesIgnoreCase, 
        @QueryValue(value="variableValuesIgnoreCase") @Nullable Boolean variableValuesIgnoreCase, 
        @QueryValue(value="variableScopeIdIn") @Nullable String variableScopeIdIn, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder
    );

    /**
     * Get Variable Instances (POST)
     * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param variableInstanceQueryDto  (optional)
     * @return List&lt;VariableInstanceDto&gt;
     */
    @Post(uri="/variable-instance")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<List<VariableInstanceDto>> queryVariableInstances(
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @QueryValue(value="deserializeValues") @Nullable Boolean deserializeValues, 
        @Body @Nullable @Valid VariableInstanceQueryDto variableInstanceQueryDto
    );

    /**
     * Get Variable Instance Count (POST)
     * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.18/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.18/reference/rest/variable-instance/get-query-count/) method.
     *
     * @param variableInstanceQueryDto  (optional)
     * @return CountResultDto
     */
    @Post(uri="/variable-instance/count")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CountResultDto> queryVariableInstancesCount(
        @Body @Nullable @Valid VariableInstanceQueryDto variableInstanceQueryDto
    );

}
