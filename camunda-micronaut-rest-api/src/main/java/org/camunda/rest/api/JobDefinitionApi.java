/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.*;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface JobDefinitionApi {
    /**
     * Get Job Definition
     * Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
     *
     * @param id The id of the job definition to be retrieved. (required)
     * @return JobDefinitionDto
     */
    @Get(uri="/job-definition/{id}")
    @Consumes({"application/json"})
    Mono<JobDefinitionDto> getJobDefinition(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Job Definitions
     * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
     *
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)
     * @param processDefinitionId Only include job definitions which exist for the given process definition id. (optional)
     * @param processDefinitionKey Only include job definitions which exist for the given process definition key. (optional)
     * @param jobType Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)
     * @param jobConfiguration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)
     * @param active Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)
     * @param tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return List&lt;JobDefinitionDto&gt;
     */
    @Get(uri="/job-definition")
    @Consumes({"application/json"})
    Mono<List<JobDefinitionDto>> getJobDefinitions(
        @QueryValue(value="jobDefinitionId") @Nullable String jobDefinitionId, 
        @QueryValue(value="activityIdIn") @Nullable String activityIdIn, 
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="processDefinitionKey") @Nullable String processDefinitionKey, 
        @QueryValue(value="jobType") @Nullable String jobType, 
        @QueryValue(value="jobConfiguration") @Nullable String jobConfiguration, 
        @QueryValue(value="active") @Nullable Boolean active, 
        @QueryValue(value="suspended") @Nullable Boolean suspended, 
        @QueryValue(value="withOverridingJobPriority") @Nullable Boolean withOverridingJobPriority, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="includeJobDefinitionsWithoutTenantId") @Nullable Boolean includeJobDefinitionsWithoutTenantId, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults
    );

    /**
     * Get Job Definition Count
     * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method.
     *
     * @param jobDefinitionId Filter by job definition id. (optional)
     * @param activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)
     * @param processDefinitionId Only include job definitions which exist for the given process definition id. (optional)
     * @param processDefinitionKey Only include job definitions which exist for the given process definition key. (optional)
     * @param jobType Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)
     * @param jobConfiguration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)
     * @param active Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)
     * @param tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)
     * @param withoutTenantId Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return CountResultDto
     */
    @Get(uri="/job-definition/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getJobDefinitionsCount(
        @QueryValue(value="jobDefinitionId") @Nullable String jobDefinitionId, 
        @QueryValue(value="activityIdIn") @Nullable String activityIdIn, 
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="processDefinitionKey") @Nullable String processDefinitionKey, 
        @QueryValue(value="jobType") @Nullable String jobType, 
        @QueryValue(value="jobConfiguration") @Nullable String jobConfiguration, 
        @QueryValue(value="active") @Nullable Boolean active, 
        @QueryValue(value="suspended") @Nullable Boolean suspended, 
        @QueryValue(value="withOverridingJobPriority") @Nullable Boolean withOverridingJobPriority, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="includeJobDefinitionsWithoutTenantId") @Nullable Boolean includeJobDefinitionsWithoutTenantId
    );

    /**
     * Get Job Definitions (POST)
     * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param jobDefinitionQueryDto  (optional)
     * @return List&lt;JobDefinitionDto&gt;
     */
    @Post(uri="/job-definition")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<List<JobDefinitionDto>> queryJobDefinitions(
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @Body @Nullable @Valid JobDefinitionQueryDto jobDefinitionQueryDto
    );

    /**
     * Get Job Definition Count (POST)
     * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/job-definition/get-query-count/) method.
     *
     * @param jobDefinitionQueryDto  (optional)
     * @return CountResultDto
     */
    @Post(uri="/job-definition/count")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CountResultDto> queryJobDefinitionsCount(
        @Body @Nullable @Valid JobDefinitionQueryDto jobDefinitionQueryDto
    );

    /**
     * Set Job Definition Priority by Id
     * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
     *
     * @param id The id of the job definition to be updated. (required)
     * @param jobDefinitionPriorityDto  (optional)
     */
    @Put(uri="/job-definition/{id}/jobPriority")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> setJobPriorityJobDefinition(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid JobDefinitionPriorityDto jobDefinitionPriorityDto
    );

    /**
     * Set Job Retries By Job Definition Id
     * Sets the number of retries of all **failed** jobs associated with the given job definition id.
     *
     * @param id The id of the job definition to be updated. (required)
     * @param retriesDto  (optional)
     */
    @Put(uri="/job-definition/{id}/retries")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> setJobRetriesJobDefinition(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid RetriesDto retriesDto
    );

    /**
     * Activate/Suspend Job Definition By Id
     * Activates or suspends a given job definition by id.
     *
     * @param id The id of the job definition to activate or suspend. (required)
     * @param jobDefinitionSuspensionStateDto  (optional)
     */
    @Put(uri="/job-definition/{id}/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateSuspensionStateJobDefinition(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto
    );

    /**
     * Activate/Suspend Job Definitions
     * Activates or suspends job definitions with the given process definition id or process definition key.
     *
     * @param jobDefinitionsSuspensionStateDto  (optional)
     */
    @Put(uri="/job-definition/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateSuspensionStateJobDefinitions(
        @Body @Nullable @Valid JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto
    );

}
