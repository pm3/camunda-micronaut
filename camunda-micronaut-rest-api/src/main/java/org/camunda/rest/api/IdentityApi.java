/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.*;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface IdentityApi {
    /**
     * Validate Password
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
     *
     * @param passwordPolicyRequestDto  (optional)
     * @return CheckPasswordPolicyResultDto
     */
    @Post(uri="/identity/password-policy")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CheckPasswordPolicyResultDto> checkPassword(
        @Body @Nullable @Valid PasswordPolicyRequestDto passwordPolicyRequestDto
    );

    /**
     * Get a User&#39;s Groups
     * Gets the groups of a user by id and includes all users that share a group with the given user.
     *
     * @param userId The id of the user to get the groups for. (required)
     * @return IdentityServiceGroupInfoDto
     */
    @Get(uri="/identity/groups")
    @Consumes({"application/json"})
    Mono<IdentityServiceGroupInfoDto> getGroupInfo(
        @QueryValue(value="userId") @NotNull String userId
    );

    /**
     * Get Password Policy
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/7.18/user-guide/security/).
     *
     * @return PasswordPolicyDto
     */
    @Get(uri="/identity/password-policy")
    @Consumes({"application/json"})
    Mono<PasswordPolicyDto> getPasswordPolicy();

    /**
     * Verify User
     * Verifies that user credentials are valid.
     *
     * @param basicUserCredentialsDto  (optional)
     * @return AuthenticationResult
     */
    @Post(uri="/identity/verify")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<AuthenticationResult> verifyUser(
        @Body @Nullable @Valid BasicUserCredentialsDto basicUserCredentialsDto
    );

}
