/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.*;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.io.File;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface ProcessDefinitionApi {
    /**
     * Delete
     * Deletes a running process instance by id.
     *
     * @param id The id of the process definition to be deleted. (required)
     * @param cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)
     * @param skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)
     * @param skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)
     */
    @Delete(uri="/process-definition/{id}")
    @Consumes({"application/json"})
    Mono<Void> deleteProcessDefinition(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="cascade") @Nullable Boolean cascade, 
        @QueryValue(value="skipCustomListeners", defaultValue="false") @Nullable Boolean skipCustomListeners, 
        @QueryValue(value="skipIoMappings", defaultValue="false") @Nullable Boolean skipIoMappings
    );

    /**
     * Delete By Key
     * Deletes process definitions by a given key which belong to no tenant id.
     *
     * @param key The key of the process definitions to be deleted. (required)
     * @param cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)
     * @param skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)
     * @param skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)
     */
    @Delete(uri="/process-definition/key/{key}")
    @Consumes({"application/json"})
    Mono<Void> deleteProcessDefinitionsByKey(
        @PathVariable(name="key") @NotNull String key, 
        @QueryValue(value="cascade") @Nullable Boolean cascade, 
        @QueryValue(value="skipCustomListeners", defaultValue="false") @Nullable Boolean skipCustomListeners, 
        @QueryValue(value="skipIoMappings", defaultValue="false") @Nullable Boolean skipIoMappings
    );

    /**
     * Delete By Key
     * Deletes process definitions by a given key and which belong to a tenant id.
     *
     * @param key The key of the process definitions to be deleted. (required)
     * @param tenantId The id of the tenant the process definitions belong to. (required)
     * @param cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)
     * @param skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)
     * @param skipIoMappings A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)
     */
    @Delete(uri="/process-definition/key/{key}/tenant-id/{tenant-id}")
    @Consumes({"application/json"})
    Mono<Void> deleteProcessDefinitionsByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @QueryValue(value="cascade") @Nullable Boolean cascade, 
        @QueryValue(value="skipCustomListeners", defaultValue="false") @Nullable Boolean skipCustomListeners, 
        @QueryValue(value="skipIoMappings", defaultValue="false") @Nullable Boolean skipIoMappings
    );

    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param id The id of the process definition. (required)
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @return List&lt;ActivityStatisticsResultDto&gt;
     */
    @Get(uri="/process-definition/{id}/statistics")
    @Consumes({"application/json"})
    Mono<List<ActivityStatisticsResultDto>> getActivityStatistics(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="failedJobs") @Nullable Boolean failedJobs, 
        @QueryValue(value="incidents") @Nullable Boolean incidents, 
        @QueryValue(value="incidentsForType") @Nullable String incidentsForType
    );

    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @return List&lt;ActivityStatisticsResultDto&gt;
     */
    @Get(uri="/process-definition/key/{key}/statistics")
    @Consumes({"application/json"})
    Mono<List<ActivityStatisticsResultDto>> getActivityStatisticsByProcessDefinitionKey(
        @PathVariable(name="key") @NotNull String key, 
        @QueryValue(value="failedJobs") @Nullable Boolean failedJobs, 
        @QueryValue(value="incidents") @Nullable Boolean incidents, 
        @QueryValue(value="incidentsForType") @Nullable String incidentsForType
    );

    /**
     * Get Activity Instance Statistics
     * Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @return List&lt;ActivityStatisticsResultDto&gt;
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/statistics")
    @Consumes({"application/json"})
    Mono<List<ActivityStatisticsResultDto>> getActivityStatisticsByProcessDefinitionKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @QueryValue(value="failedJobs") @Nullable Boolean failedJobs, 
        @QueryValue(value="incidents") @Nullable Boolean incidents, 
        @QueryValue(value="incidentsForType") @Nullable String incidentsForType
    );

    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#embedded-task-forms).
     *
     * @param id The id of the process definition to get the deployed start form for. (required)
     * @return File
     */
    @Get(uri="/process-definition/{id}/deployed-start-form")
    @Consumes({"application/xhtml+xml", "application/json"})
    Mono<File> getDeployedStartForm(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#embedded-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @return File
     */
    @Get(uri="/process-definition/key/{key}/deployed-start-form")
    @Consumes({"application/xhtml+xml", "application/json"})
    Mono<File> getDeployedStartFormByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Deployed Start Form
     * Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#embedded-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definitions belong to. (required)
     * @return File
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form")
    @Consumes({"application/xhtml+xml", "application/json"})
    Mono<File> getDeployedStartFormByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get
     * Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return ProcessDefinitionDto
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}")
    @Consumes({"application/json"})
    Mono<ProcessDefinitionDto> getLatestProcessDefinitionByTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     *
     * @param id The id of the process definition to be retrieved. (required)
     * @return ProcessDefinitionDto
     */
    @Get(uri="/process-definition/{id}")
    @Consumes({"application/json"})
    Mono<ProcessDefinitionDto> getProcessDefinition(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get XML
     * Retrieves the BPMN 2.0 XML of a process definition.
     *
     * @param id The id of the process definition. (required)
     * @return ProcessDefinitionDiagramDto
     */
    @Get(uri="/process-definition/{id}/xml")
    @Consumes({"application/json"})
    Mono<ProcessDefinitionDiagramDto> getProcessDefinitionBpmn20Xml(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition.
     *
     * @param key The key of the process definition (the latest version thereof) whose XML should be retrieved. (required)
     * @return ProcessDefinitionDiagramDto
     */
    @Get(uri="/process-definition/key/{key}/xml")
    @Consumes({"application/json"})
    Mono<ProcessDefinitionDiagramDto> getProcessDefinitionBpmn20XmlByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get XML
     * Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
     *
     * @param key The key of the process definition (the latest version thereof) whose XML should be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return ProcessDefinitionDiagramDto
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/xml")
    @Consumes({"application/json"})
    Mono<ProcessDefinitionDiagramDto> getProcessDefinitionBpmn20XmlByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get
     * Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @return ProcessDefinitionDto
     */
    @Get(uri="/process-definition/key/{key}")
    @Consumes({"application/json"})
    Mono<ProcessDefinitionDto> getProcessDefinitionByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Diagram
     * Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
     *
     * @param id The id of the process definition. (required)
     * @return File
     */
    @Get(uri="/process-definition/{id}/diagram")
    @Consumes({"application/octet-stream", "application/json"})
    Mono<File> getProcessDefinitionDiagram(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Diagram
     * Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
     *
     * @param key The key of the process definition. (required)
     * @return File
     */
    @Get(uri="/process-definition/key/{key}/diagram")
    @Consumes({"application/octet-stream", "application/json"})
    Mono<File> getProcessDefinitionDiagramByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Diagram
     * Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
     *
     * @param key The key of the process definition. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return File
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/diagram")
    @Consumes({"application/octet-stream", "application/json"})
    Mono<File> getProcessDefinitionDiagramByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get Process Instance Statistics
     * Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
     *
     * @param failedJobs Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param incidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)
     * @param incidentsForType If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param rootIncidents Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)
     * @return List&lt;ProcessDefinitionStatisticsResultDto&gt;
     */
    @Get(uri="/process-definition/statistics")
    @Consumes({"application/json"})
    Mono<List<ProcessDefinitionStatisticsResultDto>> getProcessDefinitionStatistics(
        @QueryValue(value="failedJobs") @Nullable Boolean failedJobs, 
        @QueryValue(value="incidents") @Nullable Boolean incidents, 
        @QueryValue(value="incidentsForType") @Nullable String incidentsForType, 
        @QueryValue(value="rootIncidents") @Nullable Boolean rootIncidents
    );

    /**
     * Get List
     * Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/process-definition/get-query-count/) method.
     *
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionIdIn Filter by a comma-separated list of process definition ids. (optional)
     * @param name Filter by process definition name. (optional)
     * @param nameLike Filter by process definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)
     * @param keysIn Filter by a comma-separated list of process definition keys. (optional)
     * @param keyLike Filter by process definition keys that the parameter is a substring of. (optional)
     * @param category Filter by process definition category. Exact match. (optional)
     * @param categoryLike Filter by process definition categories that the parameter is a substring of. (optional)
     * @param version Filter by process definition version. (optional)
     * @param latestVersion Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the process definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those process definition resources that the parameter is a substring of. (optional)
     * @param startableBy Filter by a user name who is allowed to start the process. (optional)
     * @param active Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)
     * @param includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param versionTag Filter by the version tag. (optional)
     * @param versionTagLike Filter by the version tag that the parameter is a substring of. (optional)
     * @param withoutVersionTag Only include process definitions without a &#x60;versionTag&#x60;. (optional)
     * @param startableInTasklist Filter by process definitions which are startable in Tasklist.. (optional)
     * @param notStartableInTasklist Filter by process definitions which are not startable in Tasklist. (optional)
     * @param startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return List&lt;ProcessDefinitionDto&gt;
     */
    @Get(uri="/process-definition")
    @Consumes({"application/json"})
    Mono<List<ProcessDefinitionDto>> getProcessDefinitions(
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="processDefinitionIdIn") @Nullable String processDefinitionIdIn, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="deploymentId") @Nullable String deploymentId, 
        @QueryValue(value="deployedAfter") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime deployedAfter, 
        @QueryValue(value="deployedAt") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime deployedAt, 
        @QueryValue(value="key") @Nullable String key, 
        @QueryValue(value="keysIn") @Nullable String keysIn, 
        @QueryValue(value="keyLike") @Nullable String keyLike, 
        @QueryValue(value="category") @Nullable String category, 
        @QueryValue(value="categoryLike") @Nullable String categoryLike, 
        @QueryValue(value="version") @Nullable Integer version, 
        @QueryValue(value="latestVersion") @Nullable Boolean latestVersion, 
        @QueryValue(value="resourceName") @Nullable String resourceName, 
        @QueryValue(value="resourceNameLike") @Nullable String resourceNameLike, 
        @QueryValue(value="startableBy") @Nullable String startableBy, 
        @QueryValue(value="active") @Nullable Boolean active, 
        @QueryValue(value="suspended") @Nullable Boolean suspended, 
        @QueryValue(value="incidentId") @Nullable String incidentId, 
        @QueryValue(value="incidentType") @Nullable String incidentType, 
        @QueryValue(value="incidentMessage") @Nullable String incidentMessage, 
        @QueryValue(value="incidentMessageLike") @Nullable String incidentMessageLike, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="includeProcessDefinitionsWithoutTenantId") @Nullable Boolean includeProcessDefinitionsWithoutTenantId, 
        @QueryValue(value="versionTag") @Nullable String versionTag, 
        @QueryValue(value="versionTagLike") @Nullable String versionTagLike, 
        @QueryValue(value="withoutVersionTag") @Nullable Boolean withoutVersionTag, 
        @QueryValue(value="startableInTasklist") @Nullable Boolean startableInTasklist, 
        @QueryValue(value="notStartableInTasklist") @Nullable Boolean notStartableInTasklist, 
        @QueryValue(value="startablePermissionCheck") @Nullable Boolean startablePermissionCheck, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults
    );

    /**
     * Get List Count
     * Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.18/reference/rest/process-definition/get-query/) method.
     *
     * @param processDefinitionId Filter by process definition id. (optional)
     * @param processDefinitionIdIn Filter by a comma-separated list of process definition ids. (optional)
     * @param name Filter by process definition name. (optional)
     * @param nameLike Filter by process definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param deployedAfter Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param deployedAt Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)
     * @param key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)
     * @param keysIn Filter by a comma-separated list of process definition keys. (optional)
     * @param keyLike Filter by process definition keys that the parameter is a substring of. (optional)
     * @param category Filter by process definition category. Exact match. (optional)
     * @param categoryLike Filter by process definition categories that the parameter is a substring of. (optional)
     * @param version Filter by process definition version. (optional)
     * @param latestVersion Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the process definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those process definition resources that the parameter is a substring of. (optional)
     * @param startableBy Filter by a user name who is allowed to start the process. (optional)
     * @param active Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param suspended Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)
     * @param includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param versionTag Filter by the version tag. (optional)
     * @param versionTagLike Filter by the version tag that the parameter is a substring of. (optional)
     * @param withoutVersionTag Only include process definitions without a &#x60;versionTag&#x60;. (optional)
     * @param startableInTasklist Filter by process definitions which are startable in Tasklist.. (optional)
     * @param notStartableInTasklist Filter by process definitions which are not startable in Tasklist. (optional)
     * @param startablePermissionCheck Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)
     * @return CountResultDto
     */
    @Get(uri="/process-definition/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getProcessDefinitionsCount(
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="processDefinitionIdIn") @Nullable String processDefinitionIdIn, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="deploymentId") @Nullable String deploymentId, 
        @QueryValue(value="deployedAfter") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime deployedAfter, 
        @QueryValue(value="deployedAt") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime deployedAt, 
        @QueryValue(value="key") @Nullable String key, 
        @QueryValue(value="keysIn") @Nullable String keysIn, 
        @QueryValue(value="keyLike") @Nullable String keyLike, 
        @QueryValue(value="category") @Nullable String category, 
        @QueryValue(value="categoryLike") @Nullable String categoryLike, 
        @QueryValue(value="version") @Nullable Integer version, 
        @QueryValue(value="latestVersion") @Nullable Boolean latestVersion, 
        @QueryValue(value="resourceName") @Nullable String resourceName, 
        @QueryValue(value="resourceNameLike") @Nullable String resourceNameLike, 
        @QueryValue(value="startableBy") @Nullable String startableBy, 
        @QueryValue(value="active") @Nullable Boolean active, 
        @QueryValue(value="suspended") @Nullable Boolean suspended, 
        @QueryValue(value="incidentId") @Nullable String incidentId, 
        @QueryValue(value="incidentType") @Nullable String incidentType, 
        @QueryValue(value="incidentMessage") @Nullable String incidentMessage, 
        @QueryValue(value="incidentMessageLike") @Nullable String incidentMessageLike, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="includeProcessDefinitionsWithoutTenantId") @Nullable Boolean includeProcessDefinitionsWithoutTenantId, 
        @QueryValue(value="versionTag") @Nullable String versionTag, 
        @QueryValue(value="versionTagLike") @Nullable String versionTagLike, 
        @QueryValue(value="withoutVersionTag") @Nullable Boolean withoutVersionTag, 
        @QueryValue(value="startableInTasklist") @Nullable Boolean startableInTasklist, 
        @QueryValue(value="notStartableInTasklist") @Nullable Boolean notStartableInTasklist, 
        @QueryValue(value="startablePermissionCheck") @Nullable Boolean startablePermissionCheck
    );

    /**
     * Get Rendered Start Form
     * Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms).
     *
     * @param id The id of the process definition to get the rendered start form for. (required)
     * @return File
     */
    @Get(uri="/process-definition/{id}/rendered-form")
    @Consumes({"application/xhtml+xml", "application/json"})
    Mono<File> getRenderedStartForm(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @return File
     */
    @Get(uri="/process-definition/key/{key}/rendered-form")
    @Consumes({"application/xhtml+xml", "application/json"})
    Mono<File> getRenderedStartFormByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Rendered Start Form
     * Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return File
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form")
    @Consumes({"application/xhtml+xml", "application/json"})
    Mono<File> getRenderedStartFormByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get Start Form Key
     * Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     *
     * @param id The id of the process definition to get the start form key for. (required)
     * @return FormDto
     */
    @Get(uri="/process-definition/{id}/startForm")
    @Consumes({"application/json"})
    Mono<FormDto> getStartForm(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) for which the form key is to be retrieved. (required)
     * @return FormDto
     */
    @Get(uri="/process-definition/key/{key}/startForm")
    @Consumes({"application/json"})
    Mono<FormDto> getStartFormByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Start Form Key
     * Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     *
     * @param key The key of the process definition (the latest version thereof) for which the form key is to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @return FormDto
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/startForm")
    @Consumes({"application/json"})
    Mono<FormDto> getStartFormByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get Start Form Variables
     * Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param id The id of the process definition to retrieve the variables for. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Map&lt;String, VariableValueDto&gt;
     */
    @Get(uri="/process-definition/{id}/form-variables")
    @Consumes({"application/json"})
    Mono<Map<String, VariableValueDto>> getStartFormVariables(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="variableNames") @Nullable String variableNames, 
        @QueryValue(value="deserializeValues", defaultValue="true") @Nullable Boolean deserializeValues
    );

    /**
     * Get Start Form Variables
     * Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Map&lt;String, VariableValueDto&gt;
     */
    @Get(uri="/process-definition/key/{key}/form-variables")
    @Consumes({"application/json"})
    Mono<Map<String, VariableValueDto>> getStartFormVariablesByKey(
        @PathVariable(name="key") @NotNull String key, 
        @QueryValue(value="variableNames") @Nullable String variableNames, 
        @QueryValue(value="deserializeValues", defaultValue="true") @Nullable Boolean deserializeValues
    );

    /**
     * Get Start Form Variables
     * Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param variableNames A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Map&lt;String, VariableValueDto&gt;
     */
    @Get(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables")
    @Consumes({"application/json"})
    Mono<Map<String, VariableValueDto>> getStartFormVariablesByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @QueryValue(value="variableNames") @Nullable String variableNames, 
        @QueryValue(value="deserializeValues", defaultValue="true") @Nullable Boolean deserializeValues
    );

    /**
     * Get Static Called Process Definitions
     * For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
     *
     * @param id The id of the process definition. (required)
     * @return List&lt;CalledProcessDefinitionDto&gt;
     */
    @Get(uri="/process-definition/{id}/static-called-process-definitions")
    @Consumes({"application/json"})
    Mono<List<CalledProcessDefinitionDto>> getStaticCalledProcessDefinitions(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Restart Process Instance
     * Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.18/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-restart/#execution).
     *
     * @param id The id of the process definition of the process instances to restart. (required)
     * @param restartProcessInstanceDto  (optional)
     */
    @Post(uri="/process-definition/{id}/restart")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> restartProcessInstance(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid RestartProcessInstanceDto restartProcessInstanceDto
    );

    /**
     * Restart Process Instance Async
     * Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.18/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-restart/#execution).
     *
     * @param id The id of the process definition of the process instances to restart. (required)
     * @param restartProcessInstanceDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/process-definition/{id}/restart-async")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> restartProcessInstanceAsyncOperation(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid RestartProcessInstanceDto restartProcessInstanceDto
    );

    /**
     * Start Instance
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     *
     * @param id The id of the process definition to be retrieved. (required)
     * @param startProcessInstanceDto  (optional)
     * @return ProcessInstanceWithVariablesDto
     */
    @Post(uri="/process-definition/{id}/start")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<ProcessInstanceWithVariablesDto> startProcessInstance(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid StartProcessInstanceDto startProcessInstanceDto
    );

    /**
     * Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param startProcessInstanceDto  (optional)
     * @return ProcessInstanceWithVariablesDto
     */
    @Post(uri="/process-definition/key/{key}/start")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<ProcessInstanceWithVariablesDto> startProcessInstanceByKey(
        @PathVariable(name="key") @NotNull String key, 
        @Body @Nullable @Valid StartProcessInstanceDto startProcessInstanceDto
    );

    /**
     * Start Instance
     * Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
     *
     * @param key The key of the process definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param startProcessInstanceDto  (optional)
     * @return ProcessInstanceWithVariablesDto
     */
    @Post(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/start")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<ProcessInstanceWithVariablesDto> startProcessInstanceByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @Body @Nullable @Valid StartProcessInstanceDto startProcessInstanceDto
    );

    /**
     * Submit Start Form
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms).
     *
     * @param id The id of the process definition to submit the form for. (required)
     * @param startProcessInstanceFormDto  (optional)
     * @return ProcessInstanceDto
     */
    @Post(uri="/process-definition/{id}/submit-form")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<ProcessInstanceDto> submitForm(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid StartProcessInstanceFormDto startProcessInstanceFormDto
    );

    /**
     * Submit Start Form
     * Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition to submit the form for. (required)
     * @param startProcessInstanceFormDto  (optional)
     * @return ProcessInstanceDto
     */
    @Post(uri="/process-definition/key/{key}/submit-form")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<ProcessInstanceDto> submitFormByKey(
        @PathVariable(name="key") @NotNull String key, 
        @Body @Nullable @Valid StartProcessInstanceFormDto startProcessInstanceFormDto
    );

    /**
     * Submit Start Form
     * Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.18/user-guide/task-forms/#generated-task-forms).
     *
     * @param key The key of the process definition to submit the form for. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param startProcessInstanceFormDto  (optional)
     * @return ProcessInstanceDto
     */
    @Post(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<ProcessInstanceDto> submitFormByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @Body @Nullable @Valid StartProcessInstanceFormDto startProcessInstanceFormDto
    );

    /**
     * Update History Time to Live
     * Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
     *
     * @param id The id of the process definition to change history time to live. (required)
     * @param historyTimeToLiveDto  (optional)
     */
    @Put(uri="/process-definition/{id}/history-time-to-live")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateHistoryTimeToLiveByProcessDefinitionId(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid HistoryTimeToLiveDto historyTimeToLiveDto
    );

    /**
     * Update History Time to Live
     * Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
     *
     * @param key The key of the process definition to change history time to live. (required)
     * @param historyTimeToLiveDto  (optional)
     */
    @Put(uri="/process-definition/key/{key}/history-time-to-live")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateHistoryTimeToLiveByProcessDefinitionKey(
        @PathVariable(name="key") @NotNull String key, 
        @Body @Nullable @Valid HistoryTimeToLiveDto historyTimeToLiveDto
    );

    /**
     * Update History Time to Live
     * Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.18/user-guide/process-engine/history/#history-cleanup).
     *
     * @param key The key of the process definition to change history time to live. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param historyTimeToLiveDto  (optional)
     */
    @Put(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @Body @Nullable @Valid HistoryTimeToLiveDto historyTimeToLiveDto
    );

    /**
     * Activate/Suspend By Key
     * Activates or suspends process definitions with the given process definition key.
     *
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)
     */
    @Put(uri="/process-definition/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateProcessDefinitionSuspensionState(
        @Body @Nullable @Valid ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );

    /**
     * Activate/Suspend By Id
     * Activates or suspends a given process definition by id.
     *
     * @param id The id of the process definition to activate or suspend. (required)
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)
     */
    @Put(uri="/process-definition/{id}/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateProcessDefinitionSuspensionStateById(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );

    /**
     * Activate/Suspend by Id
     * Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
     *
     * @param key The key of the process definition (the latest version thereof) to be activated/suspended. (required)
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)
     */
    @Put(uri="/process-definition/key/{key}/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateProcessDefinitionSuspensionStateByKey(
        @PathVariable(name="key") @NotNull String key, 
        @Body @Nullable @Valid ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );

    /**
     * Activate/Suspend by Id
     * Activates or suspends a given process definition by the latest version of the process definition for tenant.
     *
     * @param key The key of the process definition (the latest version thereof) to be activated/suspended. (required)
     * @param tenantId The id of the tenant the process definition belongs to. (required)
     * @param processDefinitionSuspensionStateDto **Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)
     */
    @Put(uri="/process-definition/key/{key}/tenant-id/{tenant-id}/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateProcessDefinitionSuspensionStateByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId, 
        @Body @Nullable @Valid ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto
    );

}
