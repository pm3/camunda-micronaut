/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.CountResultDto;
import org.camunda.rest.model.ResourceOptionsDto;
import org.camunda.rest.model.TenantDto;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface TenantApi {
    /**
     * Tenant Group Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the tenant (required)
     * @return ResourceOptionsDto
     */
    @Options(uri="/tenant/{id}/group-members")
    @Consumes({"application/json"})
    Mono<ResourceOptionsDto> availableTenantGroupMembersOperations(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Tenant Resource Options
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant/{id}&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the tenant (required)
     * @return ResourceOptionsDto
     */
    @Options(uri="/tenant/{id}")
    @Consumes({"application/json"})
    Mono<ResourceOptionsDto> availableTenantInstanceOperations(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Tenant Resource Options
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @return ResourceOptionsDto
     */
    @Options(uri="/tenant")
    @Consumes({"application/json"})
    Mono<ResourceOptionsDto> availableTenantResourceOperations();

    /**
     * Tenant User Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the tenant (required)
     * @return ResourceOptionsDto
     */
    @Options(uri="/tenant/{id}/user-members")
    @Consumes({"application/json"})
    Mono<ResourceOptionsDto> availableTenantUserMembersOperations(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Create Tenant Group Membership
     * Creates a membership between a tenant and a group.
     *
     * @param id The id of the tenant. (required)
     * @param groupId The id of the group. (required)
     */
    @Put(uri="/tenant/{id}/group-members/{groupId}")
    @Consumes({"application/json"})
    Mono<Void> createGroupMembership(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="groupId") @NotNull String groupId
    );

    /**
     * Create Tenant
     * Create a new tenant.
     *
     * @param tenantDto  (optional)
     */
    @Post(uri="/tenant/create")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> createTenant(
        @Body @Nullable @Valid TenantDto tenantDto
    );

    /**
     * Create Tenant User Membership
     * Creates a membership between a tenant and an user.
     *
     * @param id The id of the tenant. (required)
     * @param userId The id of the user. (required)
     */
    @Put(uri="/tenant/{id}/user-members/{userId}")
    @Consumes({"application/json"})
    Mono<Void> createUserMembership(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="userId") @NotNull String userId
    );

    /**
     * Create Tenant Group Membership
     * Creates a membership between a tenant and a group.
     *
     * @param id The id of the tenant. (required)
     * @param groupId The id of the group. (required)
     */
    @Delete(uri="/tenant/{id}/group-members/{groupId}")
    @Consumes({"application/json"})
    Mono<Void> deleteGroupMembership(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="groupId") @NotNull String groupId
    );

    /**
     * Delete Tenant
     * Deletes a tenant by id.
     *
     * @param id The id of the tenant to be deleted. (required)
     */
    @Delete(uri="/tenant/{id}")
    @Consumes({"application/json"})
    Mono<Void> deleteTenant(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Delete a Tenant User Membership
     * Deletes a membership between a tenant and an user.
     *
     * @param id The id of the tenant. (required)
     * @param userId The id of the user. (required)
     */
    @Delete(uri="/tenant/{id}/user-members/{userId}")
    @Consumes({"application/json"})
    Mono<Void> deleteUserMembership(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="userId") @NotNull String userId
    );

    /**
     * Get Tenant
     * Retrieves a tenant.
     *
     * @param id The id of the tenant to be retrieved. (required)
     * @return TenantDto
     */
    @Get(uri="/tenant/{id}")
    @Consumes({"application/json"})
    Mono<TenantDto> getTenant(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Tenant Count
     * Query for tenants using a list of parameters and retrieves the count.
     *
     * @param id Filter by the id of the tenant. (optional)
     * @param name Filter by the name of the tenant. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param userMember Select only tenants where the given user is a member of. (optional)
     * @param groupMember Select only tenants where the given group is a member of. (optional)
     * @param includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return CountResultDto
     */
    @Get(uri="/tenant/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getTenantCount(
        @QueryValue(value="id") @Nullable String id, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="userMember") @Nullable String userMember, 
        @QueryValue(value="groupMember") @Nullable String groupMember, 
        @QueryValue(value="includingGroupsOfUser") @Nullable Boolean includingGroupsOfUser
    );

    /**
     * Get Tenants
     * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/7.18/reference/rest/tenant/get-query-count/) method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param id Filter by the id of the tenant. (optional)
     * @param name Filter by the name of the tenant. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param userMember Select only tenants where the given user is a member of. (optional)
     * @param groupMember Select only tenants where the given group is a member of. (optional)
     * @param includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return List&lt;TenantDto&gt;
     */
    @Get(uri="/tenant")
    @Consumes({"application/json"})
    Mono<List<TenantDto>> queryTenants(
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @QueryValue(value="id") @Nullable String id, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="userMember") @Nullable String userMember, 
        @QueryValue(value="groupMember") @Nullable String groupMember, 
        @QueryValue(value="includingGroupsOfUser") @Nullable Boolean includingGroupsOfUser
    );

    /**
     * Update Tenant
     * Updates a given tenant.
     *
     * @param id The id of the tenant. (required)
     * @param tenantDto  (optional)
     */
    @Put(uri="/tenant/{id}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateTenant(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid TenantDto tenantDto
    );

}
