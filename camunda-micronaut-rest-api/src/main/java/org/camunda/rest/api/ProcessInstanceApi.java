/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.*;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.io.File;
import java.util.List;
import java.util.Map;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface ProcessInstanceApi {
    /**
     * Correlate Message Async (POST)
     * Correlates a message asynchronously to executions that are waiting for this message.  Messages will not be correlated to process definition-level start message events to start process instances.
     *
     * @param correlationMessageAsyncDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/message-async")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> correlateMessageAsyncOperation(
        @Body @Nullable @Valid CorrelationMessageAsyncDto correlationMessageAsyncDto
    );

    /**
     * Delete Async Historic Query Based (POST)
     * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     *
     * @param deleteProcessInstancesDto **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/delete-historic-query-based")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> deleteAsyncHistoricQueryBased(
        @Body @Nullable @Valid DeleteProcessInstancesDto deleteProcessInstancesDto
    );

    /**
     * Delete
     * Deletes a running process instance by id.
     *
     * @param id The id of the process instance to be deleted. (required)
     * @param skipCustomListeners If set to true, the custom listeners will be skipped. (optional, default to false)
     * @param skipIoMappings If set to true, the input/output mappings will be skipped. (optional, default to false)
     * @param skipSubprocesses If set to true, subprocesses related to deleted processes will be skipped. (optional, default to false)
     * @param failIfNotExists If set to false, the request will still be successful if the process id is not found. (optional, default to true)
     */
    @Delete(uri="/process-instance/{id}")
    @Consumes({"application/json"})
    Mono<Void> deleteProcessInstance(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="skipCustomListeners", defaultValue="false") @Nullable Boolean skipCustomListeners, 
        @QueryValue(value="skipIoMappings", defaultValue="false") @Nullable Boolean skipIoMappings, 
        @QueryValue(value="skipSubprocesses", defaultValue="false") @Nullable Boolean skipSubprocesses, 
        @QueryValue(value="failIfNotExists", defaultValue="true") @Nullable Boolean failIfNotExists
    );

    /**
     * Delete Process Variable
     * Deletes a variable of a process instance by id.
     *
     * @param id The id of the process instance to delete the variable from. (required)
     * @param varName The name of the variable to delete. (required)
     */
    @Delete(uri="/process-instance/{id}/variables/{varName}")
    Mono<Void> deleteProcessInstanceVariable(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="varName") @NotNull String varName
    );

    /**
     * Delete Async (POST)
     * Deletes multiple process instances asynchronously (batch).
     *
     * @param deleteProcessInstancesDto **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/delete")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> deleteProcessInstancesAsyncOperation(
        @Body @Nullable @Valid DeleteProcessInstancesDto deleteProcessInstancesDto
    );

    /**
     * Get Activity Instance
     * Retrieves an Activity Instance (Tree) for a given process instance by id.
     *
     * @param id The id of the process instance for which the activity instance should be retrieved. (required)
     * @return ActivityInstanceDto
     */
    @Get(uri="/process-instance/{id}/activity-instances")
    @Consumes({"application/json"})
    Mono<ActivityInstanceDto> getActivityInstanceTree(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Process Instance
     * Retrieves a process instance by id, according to the &#x60;ProcessInstance&#x60; interface in the engine.
     *
     * @param id The id of the process instance to be retrieved. (required)
     * @return ProcessInstanceDto
     */
    @Get(uri="/process-instance/{id}")
    @Consumes({"application/json"})
    Mono<ProcessInstanceDto> getProcessInstance(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Process Instance Comments
     * Gets the comments for a process instance by id.
     *
     * @param id The id of the process instance to retrieve the comments for. (required)
     * @return List&lt;CommentDto&gt;
     */
    @Get(uri="/process-instance/{id}/comment")
    @Consumes({"application/json"})
    Mono<List<CommentDto>> getProcessInstanceComments(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Process Variable
     * Retrieves a variable of a given process instance by id.
     *
     * @param id The id of the process instance to retrieve the variable for. (required)
     * @param varName The name of the variable to retrieve. (required)
     * @param deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return VariableValueDto
     */
    @Get(uri="/process-instance/{id}/variables/{varName}")
    @Consumes({"application/json"})
    Mono<VariableValueDto> getProcessInstanceVariable(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="varName") @NotNull String varName, 
        @QueryValue(value="deserializeValue", defaultValue="true") @Nullable Boolean deserializeValue
    );

    /**
     * Get Process Variable (Binary)
     * Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
     *
     * @param id The id of the process instance to retrieve the variable for. (required)
     * @param varName The name of the variable to retrieve. (required)
     * @return File
     */
    @Get(uri="/process-instance/{id}/variables/{varName}/data")
    @Consumes({"application/octet-stream", "text/plain", "application/json"})
    Mono<File> getProcessInstanceVariableBinary(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="varName") @NotNull String varName
    );

    /**
     * Get Process Variables
     * Retrieves all variables of a given process instance by id.
     *
     * @param id The id of the process instance to retrieve the variables from. (required)
     * @param deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     * @return Map&lt;String, VariableValueDto&gt;
     */
    @Get(uri="/process-instance/{id}/variables")
    @Consumes({"application/json"})
    Mono<Map<String, VariableValueDto>> getProcessInstanceVariables(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="deserializeValues", defaultValue="true") @Nullable Boolean deserializeValues
    );

    /**
     * Get List
     * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
     *
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param processInstanceIds Filter by a comma-separated list of process instance ids. (optional)
     * @param businessKey Filter by process instance business key. (optional)
     * @param businessKeyLike Filter by process instance business key that the parameter is a substring of. (optional)
     * @param caseInstanceId Filter by case instance id. (optional)
     * @param processDefinitionId Filter by the deployment the id belongs to. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the instances run on. (optional)
     * @param processDefinitionKeyIn Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param processDefinitionKeyNotIn Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param withIncident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include process instances which belong to no tenant. (optional, default to false)
     * @param processDefinitionWithoutTenantId Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param rootProcessInstances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param leafProcessInstances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     * @return List&lt;ProcessInstanceDto&gt;
     */
    @Get(uri="/process-instance")
    @Consumes({"application/json"})
    Mono<List<ProcessInstanceDto>> getProcessInstances(
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @QueryValue(value="processInstanceIds") @Nullable String processInstanceIds, 
        @QueryValue(value="businessKey") @Nullable String businessKey, 
        @QueryValue(value="businessKeyLike") @Nullable String businessKeyLike, 
        @QueryValue(value="caseInstanceId") @Nullable String caseInstanceId, 
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="processDefinitionKey") @Nullable String processDefinitionKey, 
        @QueryValue(value="processDefinitionKeyIn") @Nullable String processDefinitionKeyIn, 
        @QueryValue(value="processDefinitionKeyNotIn") @Nullable String processDefinitionKeyNotIn, 
        @QueryValue(value="deploymentId") @Nullable String deploymentId, 
        @QueryValue(value="superProcessInstance") @Nullable String superProcessInstance, 
        @QueryValue(value="subProcessInstance") @Nullable String subProcessInstance, 
        @QueryValue(value="superCaseInstance") @Nullable String superCaseInstance, 
        @QueryValue(value="subCaseInstance") @Nullable String subCaseInstance, 
        @QueryValue(value="active", defaultValue="false") @Nullable Boolean active, 
        @QueryValue(value="suspended", defaultValue="false") @Nullable Boolean suspended, 
        @QueryValue(value="withIncident", defaultValue="false") @Nullable Boolean withIncident, 
        @QueryValue(value="incidentId") @Nullable String incidentId, 
        @QueryValue(value="incidentType") @Nullable String incidentType, 
        @QueryValue(value="incidentMessage") @Nullable String incidentMessage, 
        @QueryValue(value="incidentMessageLike") @Nullable String incidentMessageLike, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId", defaultValue="false") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="processDefinitionWithoutTenantId", defaultValue="false") @Nullable Boolean processDefinitionWithoutTenantId, 
        @QueryValue(value="activityIdIn") @Nullable String activityIdIn, 
        @QueryValue(value="rootProcessInstances", defaultValue="false") @Nullable Boolean rootProcessInstances, 
        @QueryValue(value="leafProcessInstances", defaultValue="false") @Nullable Boolean leafProcessInstances, 
        @QueryValue(value="variables") @Nullable String variables, 
        @QueryValue(value="variableNamesIgnoreCase", defaultValue="false") @Nullable Boolean variableNamesIgnoreCase, 
        @QueryValue(value="variableValuesIgnoreCase", defaultValue="false") @Nullable Boolean variableValuesIgnoreCase
    );

    /**
     * Get List Count
     * Queries for the number of process instances that fulfill given parameters.
     *
     * @param processInstanceIds Filter by a comma-separated list of process instance ids. (optional)
     * @param businessKey Filter by process instance business key. (optional)
     * @param businessKeyLike Filter by process instance business key that the parameter is a substring of. (optional)
     * @param caseInstanceId Filter by case instance id. (optional)
     * @param processDefinitionId Filter by the deployment the id belongs to. (optional)
     * @param processDefinitionKey Filter by the key of the process definition the instances run on. (optional)
     * @param processDefinitionKeyIn Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param processDefinitionKeyNotIn Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param deploymentId Filter by the deployment the id belongs to. (optional)
     * @param superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param withIncident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param incidentId Filter by the incident id. (optional)
     * @param incidentType Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param incidentMessage Filter by the incident message. Exact match. (optional)
     * @param incidentMessageLike Filter by the incident message that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include process instances which belong to no tenant. (optional, default to false)
     * @param processDefinitionWithoutTenantId Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param rootProcessInstances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param leafProcessInstances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param variableNamesIgnoreCase Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param variableValuesIgnoreCase Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     * @return CountResultDto
     */
    @Get(uri="/process-instance/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getProcessInstancesCount(
        @QueryValue(value="processInstanceIds") @Nullable String processInstanceIds, 
        @QueryValue(value="businessKey") @Nullable String businessKey, 
        @QueryValue(value="businessKeyLike") @Nullable String businessKeyLike, 
        @QueryValue(value="caseInstanceId") @Nullable String caseInstanceId, 
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="processDefinitionKey") @Nullable String processDefinitionKey, 
        @QueryValue(value="processDefinitionKeyIn") @Nullable String processDefinitionKeyIn, 
        @QueryValue(value="processDefinitionKeyNotIn") @Nullable String processDefinitionKeyNotIn, 
        @QueryValue(value="deploymentId") @Nullable String deploymentId, 
        @QueryValue(value="superProcessInstance") @Nullable String superProcessInstance, 
        @QueryValue(value="subProcessInstance") @Nullable String subProcessInstance, 
        @QueryValue(value="superCaseInstance") @Nullable String superCaseInstance, 
        @QueryValue(value="subCaseInstance") @Nullable String subCaseInstance, 
        @QueryValue(value="active", defaultValue="false") @Nullable Boolean active, 
        @QueryValue(value="suspended", defaultValue="false") @Nullable Boolean suspended, 
        @QueryValue(value="withIncident", defaultValue="false") @Nullable Boolean withIncident, 
        @QueryValue(value="incidentId") @Nullable String incidentId, 
        @QueryValue(value="incidentType") @Nullable String incidentType, 
        @QueryValue(value="incidentMessage") @Nullable String incidentMessage, 
        @QueryValue(value="incidentMessageLike") @Nullable String incidentMessageLike, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId", defaultValue="false") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="processDefinitionWithoutTenantId", defaultValue="false") @Nullable Boolean processDefinitionWithoutTenantId, 
        @QueryValue(value="activityIdIn") @Nullable String activityIdIn, 
        @QueryValue(value="rootProcessInstances", defaultValue="false") @Nullable Boolean rootProcessInstances, 
        @QueryValue(value="leafProcessInstances", defaultValue="false") @Nullable Boolean leafProcessInstances, 
        @QueryValue(value="variables") @Nullable String variables, 
        @QueryValue(value="variableNamesIgnoreCase", defaultValue="false") @Nullable Boolean variableNamesIgnoreCase, 
        @QueryValue(value="variableValuesIgnoreCase", defaultValue="false") @Nullable Boolean variableValuesIgnoreCase
    );

    /**
     * Modify Process Instance Execution State
     * Submits a list of modification instructions to change a process instance&#39;s execution state. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request&#39;s body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
     *
     * @param id The id of the process instance to modify. (required)
     * @param processInstanceModificationDto  (optional)
     */
    @Post(uri="/process-instance/{id}/modification")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> modifyProcessInstance(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid ProcessInstanceModificationDto processInstanceModificationDto
    );

    /**
     * Modify Process Instance Execution State Async
     * Submits a list of modification instructions to change a process instance&#39;s execution state async. A modification instruction is one of the following:  * Starting execution before an activity * Starting execution after an activity on its single outgoing sequence flow * Starting execution on a specific sequence flow * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request&#39;s body. Variables can be provided with every starting instruction.  The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-modification/).
     *
     * @param id The id of the process instance to modify. (required)
     * @param processInstanceModificationDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/{id}/modification-async")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> modifyProcessInstanceAsyncOperation(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid ProcessInstanceModificationDto processInstanceModificationDto
    );

    /**
     * Update/Delete Process Variables
     * Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     *
     * @param id The id of the process instance to set variables for. (required)
     * @param patchVariablesDto  (optional)
     */
    @Post(uri="/process-instance/{id}/variables")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> modifyProcessInstanceVariables(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid PatchVariablesDto patchVariablesDto
    );

    /**
     * Get List (POST)
     * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types &#x60;string&#x60;, &#x60;number&#x60; or &#x60;boolean&#x60;.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param processInstanceQueryDto  (optional)
     * @return List&lt;ProcessInstanceDto&gt;
     */
    @Post(uri="/process-instance")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<List<ProcessInstanceDto>> queryProcessInstances(
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @Body @Nullable @Valid ProcessInstanceQueryDto processInstanceQueryDto
    );

    /**
     * Get List Count (POST)
     * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
     *
     * @param processInstanceQueryDto  (optional)
     * @return CountResultDto
     */
    @Post(uri="/process-instance/count")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CountResultDto> queryProcessInstancesCount(
        @Body @Nullable @Valid ProcessInstanceQueryDto processInstanceQueryDto
    );

    /**
     * Update Process Variable
     * Sets a variable of a given process instance by id.
     *
     * @param id The id of the process instance to set the variable for. (required)
     * @param varName The name of the variable to set. (required)
     * @param variableValueDto  (optional)
     */
    @Put(uri="/process-instance/{id}/variables/{varName}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> setProcessInstanceVariable(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="varName") @NotNull String varName, 
        @Body @Nullable @Valid VariableValueDto variableValueDto
    );

    /**
     * Update Process Variable (Binary)
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     *
     * @param id The id of the process instance to retrieve the variable for. (required)
     * @param varName The name of the variable to retrieve. (required)
     * @param data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param valueType The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     */
    @Post(uri="/process-instance/{id}/variables/{varName}/data")
    @Consumes({"application/json"})
    @Produces({"multipart/form-data"})
    Mono<Void> setProcessInstanceVariableBinary(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="varName") @NotNull String varName, 
        @Nullable File data, 
        @Nullable String valueType
    );

    /**
     * Set Job Retries Async (POST)
     * Create a batch to set retries of jobs associated with given processes asynchronously.
     *
     * @param setJobRetriesByProcessDto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/job-retries")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> setRetriesByProcess(
        @Body @Nullable @Valid SetJobRetriesByProcessDto setJobRetriesByProcessDto
    );

    /**
     * Set Job Retries Async Historic Query Based (POST)
     * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     *
     * @param setJobRetriesByProcessDto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/job-retries-historic-query-based")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> setRetriesByProcessHistoricQueryBased(
        @Body @Nullable @Valid SetJobRetriesByProcessDto setJobRetriesByProcessDto
    );

    /**
     * Set Variables Async (POST)
     * Update or create runtime process variables in the root scope of process instances.
     *
     * @param setVariablesAsyncDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/variables-async")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> setVariablesAsyncOperation(
        @Body @Nullable @Valid SetVariablesAsyncDto setVariablesAsyncDto
    );

    /**
     * Activate/Suspend In Group
     * Activates or suspends process instances by providing certain criteria:  # Activate/Suspend Process Instance By Process Definition Id * &#x60;suspend&#x60; * &#x60;processDefinitionId&#x60;  # Activate/Suspend Process Instance By Process Definition Key  * &#x60;suspend&#x60; * &#x60;processDefinitionKey&#x60; * &#x60;processDefinitionTenantId&#x60; * &#x60;processDefinitionWithoutTenantId&#x60;  # Activate/Suspend Process Instance In Group * &#x60;suspend&#x60; * &#x60;processInstanceIds&#x60; * &#x60;processInstanceQuery&#x60; * &#x60;historicProcessInstanceQuery&#x60;
     *
     * @param processInstanceSuspensionStateDto  (optional)
     */
    @Put(uri="/process-instance/suspended")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateSuspensionState(
        @Body @Nullable @Valid ProcessInstanceSuspensionStateDto processInstanceSuspensionStateDto
    );

    /**
     * Activate/Suspend In Batch
     * Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query.
     *
     * @param processInstanceSuspensionStateAsyncDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/process-instance/suspended-async")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> updateSuspensionStateAsyncOperation(
        @Body @Nullable @Valid ProcessInstanceSuspensionStateAsyncDto processInstanceSuspensionStateAsyncDto
    );

    /**
     * Activate/Suspend Process Instance By Id
     * Activates or suspends a given process instance by id.
     *
     * @param id The id of the process instance to activate or suspend. (required)
     * @param suspensionStateDto  (optional)
     */
    @Put(uri="/process-instance/{id}/suspended")
    @Produces({"application/json"})
    Mono<Void> updateSuspensionStateById(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid SuspensionStateDto suspensionStateDto
    );

}
