/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.Consumes;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.QueryValue;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.CountResultDto;
import org.camunda.rest.model.DecisionRequirementsDefinitionDto;
import org.camunda.rest.model.DecisionRequirementsDefinitionXmlDto;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import java.io.File;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface DecisionRequirementsDefinitionApi {
    /**
     * Get Decision Requirements Definition by ID
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
     *
     * @param id The id of the decision requirements definition to be retrieved. (required)
     * @return DecisionRequirementsDefinitionDto
     */
    @Get(uri="/decision-requirements-definition/{id}")
    @Consumes({"application/json"})
    Mono<DecisionRequirementsDefinitionDto> getDecisionRequirementsDefinitionById(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Decision Requirements Definition by Key
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @return DecisionRequirementsDefinitionDto
     */
    @Get(uri="/decision-requirements-definition/key/{key}")
    @Consumes({"application/json"})
    Mono<DecisionRequirementsDefinitionDto> getDecisionRequirementsDefinitionByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Decision Requirements Definition by Key and Tenant ID
     * Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to. (required)
     * @return DecisionRequirementsDefinitionDto
     */
    @Get(uri="/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}")
    @Consumes({"application/json"})
    Mono<DecisionRequirementsDefinitionDto> getDecisionRequirementsDefinitionByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get Decision Requirements Diagram by ID
     * Retrieves the diagram of a decision requirements definition.
     *
     * @param id The id of the decision requirements definition. (required)
     * @return File
     */
    @Get(uri="/decision-requirements-definition/{id}/diagram")
    @Consumes({"image/*", "application/octet-stream", "application/json"})
    Mono<File> getDecisionRequirementsDefinitionDiagramById(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Decision Requirements Diagram by Key
     * Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @return File
     */
    @Get(uri="/decision-requirements-definition/key/{key}/diagram")
    @Consumes({"image/*", "application/octet-stream", "application/json"})
    Mono<File> getDecisionRequirementsDefinitionDiagramByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get Decision Requirements Diagram by Key and Tenant ID
     * Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to. (required)
     * @return File
     */
    @Get(uri="/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram")
    @Consumes({"image/*", "application/octet-stream", "application/json"})
    Mono<File> getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get DMN XML by ID
     * Retrieves the DMN XML of a decision requirements definition.
     *
     * @param id The id of the decision requirements definition. (required)
     * @return DecisionRequirementsDefinitionXmlDto
     */
    @Get(uri="/decision-requirements-definition/{id}/xml")
    @Consumes({"application/json"})
    Mono<DecisionRequirementsDefinitionXmlDto> getDecisionRequirementsDefinitionDmnXmlById(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get DMN XML by Key
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @return DecisionRequirementsDefinitionXmlDto
     */
    @Get(uri="/decision-requirements-definition/key/{key}/xml")
    @Consumes({"application/json"})
    Mono<DecisionRequirementsDefinitionXmlDto> getDecisionRequirementsDefinitionDmnXmlByKey(
        @PathVariable(name="key") @NotNull String key
    );

    /**
     * Get DMN XML by Key and Tenant ID
     * Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
     *
     * @param key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param tenantId The id of the tenant to which the decision requirements definition belongs to. (required)
     * @return DecisionRequirementsDefinitionXmlDto
     */
    @Get(uri="/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml")
    @Consumes({"application/json"})
    Mono<DecisionRequirementsDefinitionXmlDto> getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(
        @PathVariable(name="key") @NotNull String key, 
        @PathVariable(name="tenant-id") @NotNull String tenantId
    );

    /**
     * Get Decision Requirements Definitions
     * Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query-count/) method.
     *
     * @param decisionRequirementsDefinitionId Filter by decision requirements definition id. (optional)
     * @param decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids. (optional)
     * @param name Filter by decision requirements definition name. (optional)
     * @param nameLike Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param keyLike Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param category Filter by decision requirements definition category. Exact match. (optional)
     * @param categoryLike Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param version Filter by decision requirements definition version. (optional)
     * @param latestVersion Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeDecisionRequirementsDefinitionsWithoutTenantId Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return List&lt;DecisionRequirementsDefinitionDto&gt;
     */
    @Get(uri="/decision-requirements-definition")
    @Consumes({"application/json"})
    Mono<List<DecisionRequirementsDefinitionDto>> getDecisionRequirementsDefinitions(
        @QueryValue(value="decisionRequirementsDefinitionId") @Nullable String decisionRequirementsDefinitionId, 
        @QueryValue(value="decisionRequirementsDefinitionIdIn") @Nullable String decisionRequirementsDefinitionIdIn, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="deploymentId") @Nullable String deploymentId, 
        @QueryValue(value="key") @Nullable String key, 
        @QueryValue(value="keyLike") @Nullable String keyLike, 
        @QueryValue(value="category") @Nullable String category, 
        @QueryValue(value="categoryLike") @Nullable String categoryLike, 
        @QueryValue(value="version") @Nullable Integer version, 
        @QueryValue(value="latestVersion") @Nullable Boolean latestVersion, 
        @QueryValue(value="resourceName") @Nullable String resourceName, 
        @QueryValue(value="resourceNameLike") @Nullable String resourceNameLike, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="includeDecisionRequirementsDefinitionsWithoutTenantId") @Nullable Boolean includeDecisionRequirementsDefinitionsWithoutTenantId, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults
    );

    /**
     * Get Decision Requirements Definition Count
     * Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.18/reference/rest/decision-requirements-definition/get-query/) method.
     *
     * @param decisionRequirementsDefinitionId Filter by decision requirements definition id. (optional)
     * @param decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids. (optional)
     * @param name Filter by decision requirements definition name. (optional)
     * @param nameLike Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param deploymentId Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param keyLike Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param category Filter by decision requirements definition category. Exact match. (optional)
     * @param categoryLike Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param version Filter by decision requirements definition version. (optional)
     * @param latestVersion Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param resourceName Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param resourceNameLike Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param withoutTenantId Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param includeDecisionRequirementsDefinitionsWithoutTenantId Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @return CountResultDto
     */
    @Get(uri="/decision-requirements-definition/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getDecisionRequirementsDefinitionsCount(
        @QueryValue(value="decisionRequirementsDefinitionId") @Nullable String decisionRequirementsDefinitionId, 
        @QueryValue(value="decisionRequirementsDefinitionIdIn") @Nullable String decisionRequirementsDefinitionIdIn, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="deploymentId") @Nullable String deploymentId, 
        @QueryValue(value="key") @Nullable String key, 
        @QueryValue(value="keyLike") @Nullable String keyLike, 
        @QueryValue(value="category") @Nullable String category, 
        @QueryValue(value="categoryLike") @Nullable String categoryLike, 
        @QueryValue(value="version") @Nullable Integer version, 
        @QueryValue(value="latestVersion") @Nullable Boolean latestVersion, 
        @QueryValue(value="resourceName") @Nullable String resourceName, 
        @QueryValue(value="resourceNameLike") @Nullable String resourceNameLike, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="withoutTenantId") @Nullable Boolean withoutTenantId, 
        @QueryValue(value="includeDecisionRequirementsDefinitionsWithoutTenantId") @Nullable Boolean includeDecisionRequirementsDefinitionsWithoutTenantId
    );

}
