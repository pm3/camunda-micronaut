/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.CommentDto;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface TaskCommentApi {
    /**
     * Create
     * Creates a comment for a task by id.
     *
     * @param id The id of the task to add the comment to. (required)
     * @param commentDto **Note:** Only the &#x60;message&#x60; and &#x60;processInstanceId&#x60; properties will be used. Every other property passed to this endpoint will be ignored. (optional)
     * @return CommentDto
     */
    @Post(uri="/task/{id}/comment/create")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CommentDto> createComment(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid CommentDto commentDto
    );

    /**
     * Get
     * Retrieves a task comment by task id and comment id.
     *
     * @param id The id of the task. (required)
     * @param commentId The id of the comment to be retrieved. (required)
     * @return CommentDto
     */
    @Get(uri="/task/{id}/comment/{commentId}")
    @Consumes({"application/json"})
    Mono<CommentDto> getComment(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="commentId") @NotNull String commentId
    );

    /**
     * Get List
     * Gets the comments for a task by id.
     *
     * @param id The id of the task to retrieve the comments for. (required)
     * @return List&lt;CommentDto&gt;
     */
    @Get(uri="/task/{id}/comment")
    @Consumes({"application/json"})
    Mono<List<CommentDto>> getComments(
        @PathVariable(name="id") @NotNull String id
    );

}
