/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.CountResultDto;
import org.camunda.rest.model.CreateFilterDto;
import org.camunda.rest.model.FilterDto;
import org.camunda.rest.model.ResourceOptionsDto;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface FilterApi {
    /**
     * Create Filter
     * Creates a new filter.
     *
     * @param createFilterDto  (optional)
     * @return FilterDto
     */
    @Post(uri="/filter/create")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<FilterDto> createFilter(
        @Body @Nullable @Valid CreateFilterDto createFilterDto
    );

    /**
     * Delete Filter
     * Deletes a filter by id.
     *
     * @param id The id of the filter to be deleted. (required)
     */
    @Delete(uri="/filter/{id}")
    @Consumes({"application/json"})
    Mono<Void> deleteFilter(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Execute Filter Count
     * Executes the saved query of the filter by id and returns the count.
     *
     * @param id The id of the filter to execute. (required)
     * @return CountResultDto
     */
    @Get(uri="/filter/{id}/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> executeFilterCount(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Execute Filter List
     * Executes the saved query of the filter by id and returns the result list.
     *
     * @param id The id of the filter to execute. (required)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return List&lt;Object&gt;
     */
    @Get(uri="/filter/{id}/list")
    @Consumes({"application/json"})
    Mono<List<Object>> executeFilterList(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults
    );

    /**
     * Execute Filter Single Result
     * Executes the saved query of the filter by id and returns the single result.
     *
     * @param id The id of the filter to execute. (required)
     * @return Object
     */
    @Get(uri="/filter/{id}/singleResult")
    @Consumes({"application/json"})
    Mono<Object> executeFilterSingleResult(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Filter Resource Options
     * The OPTIONS request allows you to check for the set of available operations  that the currently authenticated user can perform on the &#x60;/filter&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @return ResourceOptionsDto
     */
    @Options(uri="/filter")
    @Consumes({"application/json"})
    Mono<ResourceOptionsDto> filterResourceOptions();

    /**
     * Filter Resource Options
     * The OPTIONS request allows you to check for the set of available operations  that the currently authenticated user can perform on the &#x60;/filter&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     *
     * @param id The id of the filter to be checked. (required)
     * @return ResourceOptionsDto
     */
    @Options(uri="/filter/{id}")
    @Consumes({"application/json"})
    Mono<ResourceOptionsDto> filterResourceOptionsSingle(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Filter Count
     * Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set when using the  [Get Filters](https://docs.camunda.org/manual/7.18/reference/rest/filter/get-query/) method.
     *
     * @param filterId Filter by the id of the filter. (optional)
     * @param resourceType Filter by the resource type of the filter, e.g., &#x60;Task&#x60;. (optional)
     * @param name Filter by the name of the filter. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param owner Filter by the user id of the owner of the filter. (optional)
     * @return CountResultDto
     */
    @Get(uri="/filter/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getFilterCount(
        @QueryValue(value="filterId") @Nullable String filterId, 
        @QueryValue(value="resourceType") @Nullable String resourceType, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="owner") @Nullable String owner
    );

    /**
     * Get Filters
     * Queries for a list of filters using a list of parameters. The size of the result set can be retrieved by using the [Get Filter Count](https://docs.camunda.org/manual/7.18/reference/rest/filter/get-query-count/) method.
     *
     * @param filterId Filter by the id of the filter. (optional)
     * @param resourceType Filter by the resource type of the filter, e.g., &#x60;Task&#x60;. (optional)
     * @param name Filter by the name of the filter. (optional)
     * @param nameLike Filter by the name that the parameter is a substring of. (optional)
     * @param owner Filter by the user id of the owner of the filter. (optional)
     * @param itemCount If set to &#x60;true&#x60;, each filter result will contain an &#x60;itemCount&#x60; property with the number of items matched by the filter itself. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return List&lt;FilterDto&gt;
     */
    @Get(uri="/filter")
    @Consumes({"application/json"})
    Mono<List<FilterDto>> getFilterList(
        @QueryValue(value="filterId") @Nullable String filterId, 
        @QueryValue(value="resourceType") @Nullable String resourceType, 
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="nameLike") @Nullable String nameLike, 
        @QueryValue(value="owner") @Nullable String owner, 
        @QueryValue(value="itemCount") @Nullable Boolean itemCount, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults
    );

    /**
     * Get Single Filter
     * Retrieves a single filter by id, according to the &#x60;Filter&#x60; interface in the engine.
     *
     * @param id The id of the filter to be retrieved. (required)
     * @param itemCount If set to &#x60;true&#x60;, each filter result will contain an &#x60;itemCount&#x60; property with the number of items matched by the filter itself. (optional)
     * @return FilterDto
     */
    @Get(uri="/filter/{id}")
    @Consumes({"application/json"})
    Mono<FilterDto> getSingleFilter(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="itemCount") @Nullable Boolean itemCount
    );

    /**
     * Execute Filter Count (POST)
     * Executes the saved query of the filter by id and returns the count. This method is slightly more powerful then the [Get Execute Filter Count](https://docs.camunda.org/manual/7.18/reference/rest/filter/get-execute-count/)  method because it allows to extend the saved query of the filter.
     *
     * @param id The id of the filter to execute. (required)
     * @param _body A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource. (optional)
     * @return CountResultDto
     */
    @Post(uri="/filter/{id}/count")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CountResultDto> postExecuteFilterCount(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable Object _body
    );

    /**
     * Execute Filter List (POST)
     * Executes the saved query of the filter by id and returns the result list. This method is slightly more powerful then the  [Get Execute FilterList](https://docs.camunda.org/manual/7.18/reference/rest/filter/get-execute-list/) method because it allows to extend the saved query of the filter.
     *
     * @param id The id of the filter to execute. (required)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param _body A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource. (optional)
     * @return List&lt;Object&gt;
     */
    @Post(uri="/filter/{id}/list")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<List<Object>> postExecuteFilterList(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @Body @Nullable Object _body
    );

    /**
     * Execute Filter Single Result (POST)
     * Executes the saved query of the filter by id and returns the single result. This method is slightly more powerful then the [Get Execute Filter Single Result](https://docs.camunda.org/manual/7.18/reference/rest/filter/get-execute-single-result/) method because it allows to extend the saved query of the filter.
     *
     * @param id The id of the filter to execute. (required)
     * @param _body A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource. (optional)
     * @return Object
     */
    @Post(uri="/filter/{id}/singleResult")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Object> postExecuteFilterSingleResult(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable Object _body
    );

    /**
     * Update Filter
     * Updates an existing filter.
     *
     * @param id The id of the filter to be updated. (required)
     * @param createFilterDto  (optional)
     */
    @Put(uri="/filter/{id}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> updateFilter(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid CreateFilterDto createFilterDto
    );

}
