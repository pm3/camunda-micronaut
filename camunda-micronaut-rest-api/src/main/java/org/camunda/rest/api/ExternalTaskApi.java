/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.*;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.time.OffsetDateTime;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface ExternalTaskApi {
    /**
     * Complete
     * Completes an external task by id and updates process variables.
     *
     * @param id The id of the task to complete. (required)
     * @param completeExternalTaskDto  (optional)
     */
    @Post(uri="/external-task/{id}/complete")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> completeExternalTaskResource(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid CompleteExternalTaskDto completeExternalTaskDto
    );

    /**
     * Extend Lock
     * Extends the timeout of the lock by a given amount of time.
     *
     * @param id The id of the external task. (required)
     * @param extendLockOnExternalTaskDto  (optional)
     */
    @Post(uri="/external-task/{id}/extendLock")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> extendLock(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto
    );

    /**
     * Fetch and Lock
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     *
     * @param fetchExternalTasksDto  (optional)
     * @return List&lt;LockedExternalTaskDto&gt;
     */
    @Post(uri="/external-task/fetchAndLock")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<List<LockedExternalTaskDto>> fetchAndLock(
        @Body @Nullable @Valid FetchExternalTasksDto fetchExternalTasksDto
    );

    /**
     * Get
     * Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
     *
     * @param id The id of the external task to be retrieved. (required)
     * @return ExternalTaskDto
     */
    @Get(uri="/external-task/{id}")
    @Consumes({"application/json"})
    Mono<ExternalTaskDto> getExternalTask(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get Error Details
     * Retrieves the error details in the context of a running external task by id.
     *
     * @param id The id of the external task for which the error details should be retrieved. (required)
     * @return String
     */
    @Get(uri="/external-task/{id}/errorDetails")
    @Consumes({"text/plain", "application/json"})
    Mono<String> getExternalTaskErrorDetails(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get List
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query-count/) method.
     *
     * @param externalTaskId Filter by an external task&#39;s id. (optional)
     * @param externalTaskIdIn Filter by the comma-separated list of external task ids. (optional)
     * @param topicName Filter by an external task topic. (optional)
     * @param workerId Filter by the id of the worker that the task was most recently locked by. (optional)
     * @param locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param activityId Filter by the id of the activity that an external task is created for. (optional)
     * @param activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)
     * @param executionId Filter by the id of the execution that an external task belongs to. (optional)
     * @param processInstanceId Filter by the id of the process instance that an external task belongs to. (optional)
     * @param processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)
     * @param processDefinitionId Filter by the id of the process definition that an external task belongs to. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @return List&lt;ExternalTaskDto&gt;
     */
    @Get(uri="/external-task")
    @Consumes({"application/json"})
    Mono<List<ExternalTaskDto>> getExternalTasks(
        @QueryValue(value="externalTaskId") @Nullable String externalTaskId, 
        @QueryValue(value="externalTaskIdIn") @Nullable String externalTaskIdIn, 
        @QueryValue(value="topicName") @Nullable String topicName, 
        @QueryValue(value="workerId") @Nullable String workerId, 
        @QueryValue(value="locked") @Nullable Boolean locked, 
        @QueryValue(value="notLocked") @Nullable Boolean notLocked, 
        @QueryValue(value="withRetriesLeft") @Nullable Boolean withRetriesLeft, 
        @QueryValue(value="noRetriesLeft") @Nullable Boolean noRetriesLeft, 
        @QueryValue(value="lockExpirationAfter") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime lockExpirationAfter, 
        @QueryValue(value="lockExpirationBefore") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime lockExpirationBefore, 
        @QueryValue(value="activityId") @Nullable String activityId, 
        @QueryValue(value="activityIdIn") @Nullable String activityIdIn, 
        @QueryValue(value="executionId") @Nullable String executionId, 
        @QueryValue(value="processInstanceId") @Nullable String processInstanceId, 
        @QueryValue(value="processInstanceIdIn") @Nullable String processInstanceIdIn, 
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="active") @Nullable Boolean active, 
        @QueryValue(value="suspended") @Nullable Boolean suspended, 
        @QueryValue(value="priorityHigherThanOrEquals") @Nullable Long priorityHigherThanOrEquals, 
        @QueryValue(value="priorityLowerThanOrEquals") @Nullable Long priorityLowerThanOrEquals, 
        @QueryValue(value="sortBy") @Nullable String sortBy, 
        @QueryValue(value="sortOrder") @Nullable String sortOrder, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults
    );

    /**
     * Get List Count
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method.
     *
     * @param externalTaskId Filter by an external task&#39;s id. (optional)
     * @param externalTaskIdIn Filter by the comma-separated list of external task ids. (optional)
     * @param topicName Filter by an external task topic. (optional)
     * @param workerId Filter by the id of the worker that the task was most recently locked by. (optional)
     * @param locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param activityId Filter by the id of the activity that an external task is created for. (optional)
     * @param activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)
     * @param executionId Filter by the id of the execution that an external task belongs to. (optional)
     * @param processInstanceId Filter by the id of the process instance that an external task belongs to. (optional)
     * @param processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)
     * @param processDefinitionId Filter by the id of the process definition that an external task belongs to. (optional)
     * @param tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)
     * @param active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @return CountResultDto
     */
    @Get(uri="/external-task/count")
    @Consumes({"application/json"})
    Mono<CountResultDto> getExternalTasksCount(
        @QueryValue(value="externalTaskId") @Nullable String externalTaskId, 
        @QueryValue(value="externalTaskIdIn") @Nullable String externalTaskIdIn, 
        @QueryValue(value="topicName") @Nullable String topicName, 
        @QueryValue(value="workerId") @Nullable String workerId, 
        @QueryValue(value="locked") @Nullable Boolean locked, 
        @QueryValue(value="notLocked") @Nullable Boolean notLocked, 
        @QueryValue(value="withRetriesLeft") @Nullable Boolean withRetriesLeft, 
        @QueryValue(value="noRetriesLeft") @Nullable Boolean noRetriesLeft, 
        @QueryValue(value="lockExpirationAfter") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime lockExpirationAfter, 
        @QueryValue(value="lockExpirationBefore") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime lockExpirationBefore, 
        @QueryValue(value="activityId") @Nullable String activityId, 
        @QueryValue(value="activityIdIn") @Nullable String activityIdIn, 
        @QueryValue(value="executionId") @Nullable String executionId, 
        @QueryValue(value="processInstanceId") @Nullable String processInstanceId, 
        @QueryValue(value="processInstanceIdIn") @Nullable String processInstanceIdIn, 
        @QueryValue(value="processDefinitionId") @Nullable String processDefinitionId, 
        @QueryValue(value="tenantIdIn") @Nullable String tenantIdIn, 
        @QueryValue(value="active") @Nullable Boolean active, 
        @QueryValue(value="suspended") @Nullable Boolean suspended, 
        @QueryValue(value="priorityHigherThanOrEquals") @Nullable Long priorityHigherThanOrEquals, 
        @QueryValue(value="priorityLowerThanOrEquals") @Nullable Long priorityLowerThanOrEquals
    );

    /**
     * Get External Task Topic Names
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     *
     * @param withLockedTasks Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withUnlockedTasks Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @param withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)
     * @return List&lt;String&gt;
     */
    @Get(uri="/external-task/topic-names")
    @Consumes({"application/json"})
    Mono<List<String>> getTopicNames(
        @QueryValue(value="withLockedTasks") @Nullable Boolean withLockedTasks, 
        @QueryValue(value="withUnlockedTasks") @Nullable Boolean withUnlockedTasks, 
        @QueryValue(value="withRetriesLeft") @Nullable Boolean withRetriesLeft
    );

    /**
     * Handle BPMN Error
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     *
     * @param id The id of the external task in which context a BPMN error is reported. (required)
     * @param externalTaskBpmnError  (optional)
     */
    @Post(uri="/external-task/{id}/bpmnError")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> handleExternalTaskBpmnError(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid ExternalTaskBpmnError externalTaskBpmnError
    );

    /**
     * Handle Failure
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     *
     * @param id The id of the external task to report a failure for. (required)
     * @param externalTaskFailureDto  (optional)
     */
    @Post(uri="/external-task/{id}/failure")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> handleFailure(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid ExternalTaskFailureDto externalTaskFailureDto
    );

    /**
     * Lock an external task by a given id for a specified worker and amount of time.
     *
     * @param id The id of the external task. (required)
     * @param lockExternalTaskDto  (optional)
     */
    @Post(uri="/external-task/{id}/lock")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> lock(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid LockExternalTaskDto lockExternalTaskDto
    );

    /**
     * Get List (POST)
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.18/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     *
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param externalTaskQueryDto  (optional)
     * @return List&lt;ExternalTaskDto&gt;
     */
    @Post(uri="/external-task")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<List<ExternalTaskDto>> queryExternalTasks(
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @Body @Nullable @Valid ExternalTaskQueryDto externalTaskQueryDto
    );

    /**
     * Get List Count (POST)
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.18/reference/rest/external-task/post-query/) method.
     *
     * @param externalTaskQueryDto  (optional)
     * @return CountResultDto
     */
    @Post(uri="/external-task/count")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<CountResultDto> queryExternalTasksCount(
        @Body @Nullable @Valid ExternalTaskQueryDto externalTaskQueryDto
    );

    /**
     * Set Priority
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     *
     * @param id The id of the external task to set the priority for. (required)
     * @param priorityDto  (optional)
     */
    @Put(uri="/external-task/{id}/priority")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> setExternalTaskResourcePriority(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid PriorityDto priorityDto
    );

    /**
     * Set Retries
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     *
     * @param id The id of the external task to set the number of retries for. (required)
     * @param retriesDto  (optional)
     */
    @Put(uri="/external-task/{id}/retries")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> setExternalTaskResourceRetries(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid RetriesDto retriesDto
    );

    /**
     * Set Retries Sync
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     *
     * @param setRetriesForExternalTasksDto  (optional)
     */
    @Put(uri="/external-task/retries")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> setExternalTaskRetries(
        @Body @Nullable @Valid SetRetriesForExternalTasksDto setRetriesForExternalTasksDto
    );

    /**
     * Set Retries Async
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     *
     * @param setRetriesForExternalTasksDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/external-task/retries-async")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> setExternalTaskRetriesAsyncOperation(
        @Body @Nullable @Valid SetRetriesForExternalTasksDto setRetriesForExternalTasksDto
    );

    /**
     * Unlock
     * Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
     *
     * @param id The id of the external task to unlock. (required)
     */
    @Post(uri="/external-task/{id}/unlock")
    @Consumes({"application/json"})
    Mono<Void> unlock(
        @PathVariable(name="id") @NotNull String id
    );

}
