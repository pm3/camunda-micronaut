/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Consumes;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Produces;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.*;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface MigrationApi {
    /**
     * Execute Migration Plan
     * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     *
     * @param migrationExecutionDto  (optional)
     */
    @Post(uri="/migration/execute")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<Void> executeMigrationPlan(
        @Body @Nullable @Valid MigrationExecutionDto migrationExecutionDto
    );

    /**
     * Execute Migration Plan Async (Batch)
     * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/7.18/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     *
     * @param migrationExecutionDto  (optional)
     * @return BatchDto
     */
    @Post(uri="/migration/executeAsync")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<BatchDto> executeMigrationPlanAsync(
        @Body @Nullable @Valid MigrationExecutionDto migrationExecutionDto
    );

    /**
     * Generate Migration Plan
     * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
     *
     * @param migrationPlanGenerationDto  (optional)
     * @return MigrationPlanDto
     */
    @Post(uri="/migration/generate")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<MigrationPlanDto> generateMigrationPlan(
        @Body @Nullable @Valid MigrationPlanGenerationDto migrationPlanGenerationDto
    );

    /**
     * Validate Migration Plan
     * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
     *
     * @param migrationPlanDto  (optional)
     * @return MigrationPlanReportDto
     */
    @Post(uri="/migration/validate")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<MigrationPlanReportDto> validateMigrationPlan(
        @Body @Nullable @Valid MigrationPlanDto migrationPlanDto
    );

}
