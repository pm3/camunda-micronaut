/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.api;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import org.camunda.rest.model.MetricsIntervalResultDto;
import org.camunda.rest.model.MetricsResultDto;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import java.time.OffsetDateTime;
import java.util.List;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Client("${openapi-micronaut-client-base-path}")
public interface MetricsApi {
    /**
     * Delete Task Worker Metrics
     * Deletes all task worker metrics prior to the given date or all if no date is provided.
     *
     * @param date The date prior to which all task worker metrics should be deleted. (optional)
     */
    @Delete(uri="/metrics/task-worker")
    @Consumes({"application/json"})
    Mono<Void> deleteTaskMetrics(
        @QueryValue(value="date") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime date
    );

    /**
     * Get Sum
     * Retrieves the &#x60;sum&#x60; (count) for a given metric.
     *
     * @param metricsName The name of the metric. (required)
     * @param startDate The start date (inclusive). (optional)
     * @param endDate The end date (exclusive). (optional)
     * @return MetricsResultDto
     */
    @Get(uri="/metrics/{metrics-name}/sum")
    @Consumes({"application/json"})
    Mono<MetricsResultDto> getMetrics(
        @PathVariable(name="metrics-name") @NotNull String metricsName, 
        @QueryValue(value="startDate") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startDate, 
        @QueryValue(value="endDate") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endDate
    );

    /**
     * Get Metrics in Interval
     * Retrieves a list of metrics, aggregated for a given interval.
     *
     * @param name The name of the metric. (optional)
     * @param reporter The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.18/reference/deployment-descriptors/tags/process-engine/#hostname). (optional)
     * @param startDate The start date (inclusive). (optional)
     * @param endDate The end date (exclusive). (optional)
     * @param firstResult Pagination of results. Specifies the index of the first result to return. (optional)
     * @param maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param interval The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds). (optional, default to 900)
     * @param aggregateByReporter Aggregate metrics by reporter. (optional)
     * @return List&lt;MetricsIntervalResultDto&gt;
     */
    @Get(uri="/metrics")
    @Consumes({"application/json"})
    Mono<List<MetricsIntervalResultDto>> interval(
        @QueryValue(value="name") @Nullable String name, 
        @QueryValue(value="reporter") @Nullable String reporter, 
        @QueryValue(value="startDate") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startDate, 
        @QueryValue(value="endDate") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endDate, 
        @QueryValue(value="firstResult") @Nullable Integer firstResult, 
        @QueryValue(value="maxResults") @Nullable Integer maxResults, 
        @QueryValue(value="interval", defaultValue="900") @Nullable String interval, 
        @QueryValue(value="aggregateByReporter") @Nullable String aggregateByReporter
    );

}
