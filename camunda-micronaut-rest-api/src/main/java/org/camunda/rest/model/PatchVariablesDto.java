/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.*;

/**
 * PatchVariablesDto
 */
@JsonPropertyOrder({
  PatchVariablesDto.JSON_PROPERTY_MODIFICATIONS,
  PatchVariablesDto.JSON_PROPERTY_DELETIONS
})
@JsonTypeName("PatchVariablesDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class PatchVariablesDto {
    public static final String JSON_PROPERTY_MODIFICATIONS = "modifications";
    private Map<String, VariableValueDto> modifications = null;

    public static final String JSON_PROPERTY_DELETIONS = "deletions";
    private List<String> deletions = null;

    public PatchVariablesDto() {
    }

    public PatchVariablesDto modifications(Map<String, VariableValueDto> modifications) {
        this.modifications = modifications;
        return this;
    }

    public PatchVariablesDto putModificationsItem(String key, VariableValueDto modificationsItem) {
        if (this.modifications == null) {
            this.modifications = new HashMap<>();
        }
        this.modifications.put(key, modificationsItem);
        return this;
  }

    /**
     * A JSON object containing variable key-value pairs.
     * @return modifications
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MODIFICATIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, VariableValueDto> getModifications() {
        return modifications;
    }

    @JsonProperty(JSON_PROPERTY_MODIFICATIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setModifications(Map<String, VariableValueDto> modifications) {
        this.modifications = modifications;
    }

    public PatchVariablesDto deletions(List<String> deletions) {
        this.deletions = deletions;
        return this;
    }

    public PatchVariablesDto addDeletionsItem(String deletionsItem) {
        if (this.deletions == null) {
            this.deletions = new ArrayList<>();
        }
        this.deletions.add(deletionsItem);
        return this;
    }

    /**
     * An array of String keys of variables to be deleted.
     * @return deletions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DELETIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getDeletions() {
        return deletions;
    }

    @JsonProperty(JSON_PROPERTY_DELETIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeletions(List<String> deletions) {
        this.deletions = deletions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PatchVariablesDto patchVariablesDto = (PatchVariablesDto) o;
        return Objects.equals(this.modifications, patchVariablesDto.modifications) &&
            Objects.equals(this.deletions, patchVariablesDto.deletions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(modifications, deletions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PatchVariablesDto {\n");
        sb.append("    modifications: ").append(toIndentedString(modifications)).append("\n");
        sb.append("    deletions: ").append(toIndentedString(deletions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

