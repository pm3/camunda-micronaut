/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * TelemetryDataDto
 */
@JsonPropertyOrder({
  TelemetryDataDto.JSON_PROPERTY_INSTALLATION,
  TelemetryDataDto.JSON_PROPERTY_PRODUCT
})
@JsonTypeName("TelemetryDataDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class TelemetryDataDto {
    public static final String JSON_PROPERTY_INSTALLATION = "installation";
    private String installation;

    public static final String JSON_PROPERTY_PRODUCT = "product";
    private Map<String, TelemetryProductDto> product = null;

    public TelemetryDataDto() {
    }

    public TelemetryDataDto installation(String installation) {
        this.installation = installation;
        return this;
    }

    /**
     * An id which is unique for each installation of Camunda. It is stored once per database so all engines connected to the same database will have the same installation ID. The ID is used to identify a single installation of Camunda Platform.
     * @return installation
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_INSTALLATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getInstallation() {
        return installation;
    }

    @JsonProperty(JSON_PROPERTY_INSTALLATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInstallation(String installation) {
        this.installation = installation;
    }

    public TelemetryDataDto product(Map<String, TelemetryProductDto> product) {
        this.product = product;
        return this;
    }

    public TelemetryDataDto putProductItem(String key, TelemetryProductDto productItem) {
        if (this.product == null) {
            this.product = new HashMap<>();
        }
        this.product.put(key, productItem);
        return this;
  }

    /**
     * Information about the product collection telemetry data.
     * @return product
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PRODUCT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, TelemetryProductDto> getProduct() {
        return product;
    }

    @JsonProperty(JSON_PROPERTY_PRODUCT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProduct(Map<String, TelemetryProductDto> product) {
        this.product = product;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TelemetryDataDto telemetryDataDto = (TelemetryDataDto) o;
        return Objects.equals(this.installation, telemetryDataDto.installation) &&
            Objects.equals(this.product, telemetryDataDto.product);
    }

    @Override
    public int hashCode() {
        return Objects.hash(installation, product);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TelemetryDataDto {\n");
        sb.append("    installation: ").append(toIndentedString(installation)).append("\n");
        sb.append("    product: ").append(toIndentedString(product)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

