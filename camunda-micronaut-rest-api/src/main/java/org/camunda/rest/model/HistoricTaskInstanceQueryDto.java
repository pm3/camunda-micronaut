/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A Historic Task instance query which defines a list of Historic Task instances
 */
@JsonPropertyOrder({
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_PARENT_TASK_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_IN,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_EXECUTION_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_NAME,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_CASE_INSTANCE_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_CASE_EXECUTION_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_CASE_DEFINITION_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_CASE_DEFINITION_KEY,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_CASE_DEFINITION_NAME,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_ACTIVITY_INSTANCE_ID_IN,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_NAME,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_NAME_LIKE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DESCRIPTION,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DESCRIPTION_LIKE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DEFINITION_KEY,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DEFINITION_KEY_IN,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DELETE_REASON,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DELETE_REASON_LIKE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_ASSIGNEE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_ASSIGNEE_LIKE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_OWNER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_OWNER_LIKE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_PRIORITY,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_ASSIGNED,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_UNASSIGNED,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_FINISHED,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_UNFINISHED,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_FINISHED,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_UNFINISHED,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DUE_DATE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DUE_DATE_BEFORE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_DUE_DATE_AFTER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_WITHOUT_TASK_DUE_DATE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_FOLLOW_UP_DATE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_FOLLOW_UP_DATE_BEFORE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_FOLLOW_UP_DATE_AFTER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_STARTED_BEFORE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_STARTED_AFTER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_FINISHED_BEFORE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_FINISHED_AFTER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TENANT_ID_IN,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_WITHOUT_TENANT_ID,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_VARIABLES,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_PROCESS_VARIABLES,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_INVOLVED_USER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_INVOLVED_GROUP,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_HAD_CANDIDATE_USER,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_TASK_HAD_CANDIDATE_GROUP,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_WITH_CANDIDATE_GROUPS,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_WITHOUT_CANDIDATE_GROUPS,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_OR_QUERIES,
  HistoricTaskInstanceQueryDto.JSON_PROPERTY_SORTING
})
@JsonTypeName("HistoricTaskInstanceQueryDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class HistoricTaskInstanceQueryDto {
    public static final String JSON_PROPERTY_TASK_ID = "taskId";
    private String taskId;

    public static final String JSON_PROPERTY_TASK_PARENT_TASK_ID = "taskParentTaskId";
    private String taskParentTaskId;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_ID = "processInstanceId";
    private String processInstanceId;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY = "processInstanceBusinessKey";
    private String processInstanceBusinessKey;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_IN = "processInstanceBusinessKeyIn";
    private List<String> processInstanceBusinessKeyIn = null;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE = "processInstanceBusinessKeyLike";
    private String processInstanceBusinessKeyLike;

    public static final String JSON_PROPERTY_EXECUTION_ID = "executionId";
    private String executionId;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
    private String processDefinitionId;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY = "processDefinitionKey";
    private String processDefinitionKey;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_NAME = "processDefinitionName";
    private String processDefinitionName;

    public static final String JSON_PROPERTY_CASE_INSTANCE_ID = "caseInstanceId";
    private String caseInstanceId;

    public static final String JSON_PROPERTY_CASE_EXECUTION_ID = "caseExecutionId";
    private String caseExecutionId;

    public static final String JSON_PROPERTY_CASE_DEFINITION_ID = "caseDefinitionId";
    private String caseDefinitionId;

    public static final String JSON_PROPERTY_CASE_DEFINITION_KEY = "caseDefinitionKey";
    private String caseDefinitionKey;

    public static final String JSON_PROPERTY_CASE_DEFINITION_NAME = "caseDefinitionName";
    private String caseDefinitionName;

    public static final String JSON_PROPERTY_ACTIVITY_INSTANCE_ID_IN = "activityInstanceIdIn";
    private List<String> activityInstanceIdIn = null;

    public static final String JSON_PROPERTY_TASK_NAME = "taskName";
    private String taskName;

    public static final String JSON_PROPERTY_TASK_NAME_LIKE = "taskNameLike";
    private String taskNameLike;

    public static final String JSON_PROPERTY_TASK_DESCRIPTION = "taskDescription";
    private String taskDescription;

    public static final String JSON_PROPERTY_TASK_DESCRIPTION_LIKE = "taskDescriptionLike";
    private String taskDescriptionLike;

    public static final String JSON_PROPERTY_TASK_DEFINITION_KEY = "taskDefinitionKey";
    private String taskDefinitionKey;

    public static final String JSON_PROPERTY_TASK_DEFINITION_KEY_IN = "taskDefinitionKeyIn";
    private List<String> taskDefinitionKeyIn = null;

    public static final String JSON_PROPERTY_TASK_DELETE_REASON = "taskDeleteReason";
    private String taskDeleteReason;

    public static final String JSON_PROPERTY_TASK_DELETE_REASON_LIKE = "taskDeleteReasonLike";
    private String taskDeleteReasonLike;

    public static final String JSON_PROPERTY_TASK_ASSIGNEE = "taskAssignee";
    private String taskAssignee;

    public static final String JSON_PROPERTY_TASK_ASSIGNEE_LIKE = "taskAssigneeLike";
    private String taskAssigneeLike;

    public static final String JSON_PROPERTY_TASK_OWNER = "taskOwner";
    private String taskOwner;

    public static final String JSON_PROPERTY_TASK_OWNER_LIKE = "taskOwnerLike";
    private String taskOwnerLike;

    public static final String JSON_PROPERTY_TASK_PRIORITY = "taskPriority";
    private Integer taskPriority;

    public static final String JSON_PROPERTY_ASSIGNED = "assigned";
    private Boolean assigned;

    public static final String JSON_PROPERTY_UNASSIGNED = "unassigned";
    private Boolean unassigned;

    public static final String JSON_PROPERTY_FINISHED = "finished";
    private Boolean finished;

    public static final String JSON_PROPERTY_UNFINISHED = "unfinished";
    private Boolean unfinished;

    public static final String JSON_PROPERTY_PROCESS_FINISHED = "processFinished";
    private Boolean processFinished;

    public static final String JSON_PROPERTY_PROCESS_UNFINISHED = "processUnfinished";
    private Boolean processUnfinished;

    public static final String JSON_PROPERTY_TASK_DUE_DATE = "taskDueDate";
    private OffsetDateTime taskDueDate;

    public static final String JSON_PROPERTY_TASK_DUE_DATE_BEFORE = "taskDueDateBefore";
    private OffsetDateTime taskDueDateBefore;

    public static final String JSON_PROPERTY_TASK_DUE_DATE_AFTER = "taskDueDateAfter";
    private OffsetDateTime taskDueDateAfter;

    public static final String JSON_PROPERTY_WITHOUT_TASK_DUE_DATE = "withoutTaskDueDate";
    private Boolean withoutTaskDueDate;

    public static final String JSON_PROPERTY_TASK_FOLLOW_UP_DATE = "taskFollowUpDate";
    private OffsetDateTime taskFollowUpDate;

    public static final String JSON_PROPERTY_TASK_FOLLOW_UP_DATE_BEFORE = "taskFollowUpDateBefore";
    private OffsetDateTime taskFollowUpDateBefore;

    public static final String JSON_PROPERTY_TASK_FOLLOW_UP_DATE_AFTER = "taskFollowUpDateAfter";
    private OffsetDateTime taskFollowUpDateAfter;

    public static final String JSON_PROPERTY_STARTED_BEFORE = "startedBefore";
    private OffsetDateTime startedBefore;

    public static final String JSON_PROPERTY_STARTED_AFTER = "startedAfter";
    private OffsetDateTime startedAfter;

    public static final String JSON_PROPERTY_FINISHED_BEFORE = "finishedBefore";
    private OffsetDateTime finishedBefore;

    public static final String JSON_PROPERTY_FINISHED_AFTER = "finishedAfter";
    private OffsetDateTime finishedAfter;

    public static final String JSON_PROPERTY_TENANT_ID_IN = "tenantIdIn";
    private List<String> tenantIdIn = null;

    public static final String JSON_PROPERTY_WITHOUT_TENANT_ID = "withoutTenantId";
    private Boolean withoutTenantId;

    public static final String JSON_PROPERTY_TASK_VARIABLES = "taskVariables";
    private List<VariableQueryParameterDto> taskVariables = null;

    public static final String JSON_PROPERTY_PROCESS_VARIABLES = "processVariables";
    private List<VariableQueryParameterDto> processVariables = null;

    public static final String JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE = "variableNamesIgnoreCase";
    private Boolean variableNamesIgnoreCase;

    public static final String JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE = "variableValuesIgnoreCase";
    private Boolean variableValuesIgnoreCase;

    public static final String JSON_PROPERTY_TASK_INVOLVED_USER = "taskInvolvedUser";
    private String taskInvolvedUser;

    public static final String JSON_PROPERTY_TASK_INVOLVED_GROUP = "taskInvolvedGroup";
    private String taskInvolvedGroup;

    public static final String JSON_PROPERTY_TASK_HAD_CANDIDATE_USER = "taskHadCandidateUser";
    private String taskHadCandidateUser;

    public static final String JSON_PROPERTY_TASK_HAD_CANDIDATE_GROUP = "taskHadCandidateGroup";
    private String taskHadCandidateGroup;

    public static final String JSON_PROPERTY_WITH_CANDIDATE_GROUPS = "withCandidateGroups";
    private Boolean withCandidateGroups;

    public static final String JSON_PROPERTY_WITHOUT_CANDIDATE_GROUPS = "withoutCandidateGroups";
    private Boolean withoutCandidateGroups;

    public static final String JSON_PROPERTY_OR_QUERIES = "orQueries";
    private List<HistoricTaskInstanceQueryDto> orQueries = null;

    public static final String JSON_PROPERTY_SORTING = "sorting";
    private List<HistoricTaskInstanceQueryDtoSortingInner> sorting = null;

    public HistoricTaskInstanceQueryDto() {
    }

    public HistoricTaskInstanceQueryDto taskId(String taskId) {
        this.taskId = taskId;
        return this;
    }

    /**
     * Filter by task id.
     * @return taskId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskId() {
        return taskId;
    }

    @JsonProperty(JSON_PROPERTY_TASK_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    public HistoricTaskInstanceQueryDto taskParentTaskId(String taskParentTaskId) {
        this.taskParentTaskId = taskParentTaskId;
        return this;
    }

    /**
     * Filter by parent task id.
     * @return taskParentTaskId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_PARENT_TASK_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskParentTaskId() {
        return taskParentTaskId;
    }

    @JsonProperty(JSON_PROPERTY_TASK_PARENT_TASK_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskParentTaskId(String taskParentTaskId) {
        this.taskParentTaskId = taskParentTaskId;
    }

    public HistoricTaskInstanceQueryDto processInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
        return this;
    }

    /**
     * Filter by process instance id.
     * @return processInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessInstanceId() {
        return processInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public HistoricTaskInstanceQueryDto processInstanceBusinessKey(String processInstanceBusinessKey) {
        this.processInstanceBusinessKey = processInstanceBusinessKey;
        return this;
    }

    /**
     * Filter by process instance business key.
     * @return processInstanceBusinessKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessInstanceBusinessKey() {
        return processInstanceBusinessKey;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceBusinessKey(String processInstanceBusinessKey) {
        this.processInstanceBusinessKey = processInstanceBusinessKey;
    }

    public HistoricTaskInstanceQueryDto processInstanceBusinessKeyIn(List<String> processInstanceBusinessKeyIn) {
        this.processInstanceBusinessKeyIn = processInstanceBusinessKeyIn;
        return this;
    }

    public HistoricTaskInstanceQueryDto addProcessInstanceBusinessKeyInItem(String processInstanceBusinessKeyInItem) {
        if (this.processInstanceBusinessKeyIn == null) {
            this.processInstanceBusinessKeyIn = new ArrayList<>();
        }
        this.processInstanceBusinessKeyIn.add(processInstanceBusinessKeyInItem);
        return this;
    }

    /**
     * Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
     * @return processInstanceBusinessKeyIn
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getProcessInstanceBusinessKeyIn() {
        return processInstanceBusinessKeyIn;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceBusinessKeyIn(List<String> processInstanceBusinessKeyIn) {
        this.processInstanceBusinessKeyIn = processInstanceBusinessKeyIn;
    }

    public HistoricTaskInstanceQueryDto processInstanceBusinessKeyLike(String processInstanceBusinessKeyLike) {
        this.processInstanceBusinessKeyLike = processInstanceBusinessKeyLike;
        return this;
    }

    /**
     * Filter by  process instance business key that has the parameter value as a substring.
     * @return processInstanceBusinessKeyLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessInstanceBusinessKeyLike() {
        return processInstanceBusinessKeyLike;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceBusinessKeyLike(String processInstanceBusinessKeyLike) {
        this.processInstanceBusinessKeyLike = processInstanceBusinessKeyLike;
    }

    public HistoricTaskInstanceQueryDto executionId(String executionId) {
        this.executionId = executionId;
        return this;
    }

    /**
     * Filter by the id of the execution that executed the task.
     * @return executionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getExecutionId() {
        return executionId;
    }

    @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExecutionId(String executionId) {
        this.executionId = executionId;
    }

    public HistoricTaskInstanceQueryDto processDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
        return this;
    }

    /**
     * Filter by process definition id.
     * @return processDefinitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionId() {
        return processDefinitionId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
    }

    public HistoricTaskInstanceQueryDto processDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
        return this;
    }

    /**
     * Restrict to tasks that belong to a process definition with the given key.
     * @return processDefinitionKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionKey() {
        return processDefinitionKey;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
    }

    public HistoricTaskInstanceQueryDto processDefinitionName(String processDefinitionName) {
        this.processDefinitionName = processDefinitionName;
        return this;
    }

    /**
     * Restrict to tasks that belong to a process definition with the given name.
     * @return processDefinitionName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionName() {
        return processDefinitionName;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionName(String processDefinitionName) {
        this.processDefinitionName = processDefinitionName;
    }

    public HistoricTaskInstanceQueryDto caseInstanceId(String caseInstanceId) {
        this.caseInstanceId = caseInstanceId;
        return this;
    }

    /**
     * Filter by case instance id.
     * @return caseInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASE_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCaseInstanceId() {
        return caseInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_CASE_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCaseInstanceId(String caseInstanceId) {
        this.caseInstanceId = caseInstanceId;
    }

    public HistoricTaskInstanceQueryDto caseExecutionId(String caseExecutionId) {
        this.caseExecutionId = caseExecutionId;
        return this;
    }

    /**
     * Filter by the id of the case execution that executed the task.
     * @return caseExecutionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASE_EXECUTION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCaseExecutionId() {
        return caseExecutionId;
    }

    @JsonProperty(JSON_PROPERTY_CASE_EXECUTION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCaseExecutionId(String caseExecutionId) {
        this.caseExecutionId = caseExecutionId;
    }

    public HistoricTaskInstanceQueryDto caseDefinitionId(String caseDefinitionId) {
        this.caseDefinitionId = caseDefinitionId;
        return this;
    }

    /**
     * Filter by case definition id.
     * @return caseDefinitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASE_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCaseDefinitionId() {
        return caseDefinitionId;
    }

    @JsonProperty(JSON_PROPERTY_CASE_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCaseDefinitionId(String caseDefinitionId) {
        this.caseDefinitionId = caseDefinitionId;
    }

    public HistoricTaskInstanceQueryDto caseDefinitionKey(String caseDefinitionKey) {
        this.caseDefinitionKey = caseDefinitionKey;
        return this;
    }

    /**
     * Restrict to tasks that belong to a case definition with the given key.
     * @return caseDefinitionKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASE_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCaseDefinitionKey() {
        return caseDefinitionKey;
    }

    @JsonProperty(JSON_PROPERTY_CASE_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCaseDefinitionKey(String caseDefinitionKey) {
        this.caseDefinitionKey = caseDefinitionKey;
    }

    public HistoricTaskInstanceQueryDto caseDefinitionName(String caseDefinitionName) {
        this.caseDefinitionName = caseDefinitionName;
        return this;
    }

    /**
     * Restrict to tasks that belong to a case definition with the given name.
     * @return caseDefinitionName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASE_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCaseDefinitionName() {
        return caseDefinitionName;
    }

    @JsonProperty(JSON_PROPERTY_CASE_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCaseDefinitionName(String caseDefinitionName) {
        this.caseDefinitionName = caseDefinitionName;
    }

    public HistoricTaskInstanceQueryDto activityInstanceIdIn(List<String> activityInstanceIdIn) {
        this.activityInstanceIdIn = activityInstanceIdIn;
        return this;
    }

    public HistoricTaskInstanceQueryDto addActivityInstanceIdInItem(String activityInstanceIdInItem) {
        if (this.activityInstanceIdIn == null) {
            this.activityInstanceIdIn = new ArrayList<>();
        }
        this.activityInstanceIdIn.add(activityInstanceIdInItem);
        return this;
    }

    /**
     * Only include tasks which belong to one of the passed  activity instance ids.
     * @return activityInstanceIdIn
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_INSTANCE_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getActivityInstanceIdIn() {
        return activityInstanceIdIn;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_INSTANCE_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityInstanceIdIn(List<String> activityInstanceIdIn) {
        this.activityInstanceIdIn = activityInstanceIdIn;
    }

    public HistoricTaskInstanceQueryDto taskName(String taskName) {
        this.taskName = taskName;
        return this;
    }

    /**
     * Restrict to tasks that have the given name.
     * @return taskName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskName() {
        return taskName;
    }

    @JsonProperty(JSON_PROPERTY_TASK_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    public HistoricTaskInstanceQueryDto taskNameLike(String taskNameLike) {
        this.taskNameLike = taskNameLike;
        return this;
    }

    /**
     * Restrict to tasks that have a name with the given parameter value as substring.
     * @return taskNameLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_NAME_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskNameLike() {
        return taskNameLike;
    }

    @JsonProperty(JSON_PROPERTY_TASK_NAME_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskNameLike(String taskNameLike) {
        this.taskNameLike = taskNameLike;
    }

    public HistoricTaskInstanceQueryDto taskDescription(String taskDescription) {
        this.taskDescription = taskDescription;
        return this;
    }

    /**
     * Restrict to tasks that have the given description.
     * @return taskDescription
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskDescription() {
        return taskDescription;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskDescription(String taskDescription) {
        this.taskDescription = taskDescription;
    }

    public HistoricTaskInstanceQueryDto taskDescriptionLike(String taskDescriptionLike) {
        this.taskDescriptionLike = taskDescriptionLike;
        return this;
    }

    /**
     * Restrict to tasks that have a description that has the parameter value as a substring.
     * @return taskDescriptionLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DESCRIPTION_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskDescriptionLike() {
        return taskDescriptionLike;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DESCRIPTION_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskDescriptionLike(String taskDescriptionLike) {
        this.taskDescriptionLike = taskDescriptionLike;
    }

    public HistoricTaskInstanceQueryDto taskDefinitionKey(String taskDefinitionKey) {
        this.taskDefinitionKey = taskDefinitionKey;
        return this;
    }

    /**
     * Restrict to tasks that have the given key.
     * @return taskDefinitionKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskDefinitionKey() {
        return taskDefinitionKey;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskDefinitionKey(String taskDefinitionKey) {
        this.taskDefinitionKey = taskDefinitionKey;
    }

    public HistoricTaskInstanceQueryDto taskDefinitionKeyIn(List<String> taskDefinitionKeyIn) {
        this.taskDefinitionKeyIn = taskDefinitionKeyIn;
        return this;
    }

    public HistoricTaskInstanceQueryDto addTaskDefinitionKeyInItem(String taskDefinitionKeyInItem) {
        if (this.taskDefinitionKeyIn == null) {
            this.taskDefinitionKeyIn = new ArrayList<>();
        }
        this.taskDefinitionKeyIn.add(taskDefinitionKeyInItem);
        return this;
    }

    /**
     * Restrict to tasks that have one of the passed  task definition keys.
     * @return taskDefinitionKeyIn
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DEFINITION_KEY_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getTaskDefinitionKeyIn() {
        return taskDefinitionKeyIn;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DEFINITION_KEY_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskDefinitionKeyIn(List<String> taskDefinitionKeyIn) {
        this.taskDefinitionKeyIn = taskDefinitionKeyIn;
    }

    public HistoricTaskInstanceQueryDto taskDeleteReason(String taskDeleteReason) {
        this.taskDeleteReason = taskDeleteReason;
        return this;
    }

    /**
     * Restrict to tasks that have the given delete reason.
     * @return taskDeleteReason
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DELETE_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskDeleteReason() {
        return taskDeleteReason;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DELETE_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskDeleteReason(String taskDeleteReason) {
        this.taskDeleteReason = taskDeleteReason;
    }

    public HistoricTaskInstanceQueryDto taskDeleteReasonLike(String taskDeleteReasonLike) {
        this.taskDeleteReasonLike = taskDeleteReasonLike;
        return this;
    }

    /**
     * Restrict to tasks that have a delete reason that has the parameter value as a substring.
     * @return taskDeleteReasonLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DELETE_REASON_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskDeleteReasonLike() {
        return taskDeleteReasonLike;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DELETE_REASON_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskDeleteReasonLike(String taskDeleteReasonLike) {
        this.taskDeleteReasonLike = taskDeleteReasonLike;
    }

    public HistoricTaskInstanceQueryDto taskAssignee(String taskAssignee) {
        this.taskAssignee = taskAssignee;
        return this;
    }

    /**
     * Restrict to tasks that the given user is assigned to.
     * @return taskAssignee
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_ASSIGNEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskAssignee() {
        return taskAssignee;
    }

    @JsonProperty(JSON_PROPERTY_TASK_ASSIGNEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskAssignee(String taskAssignee) {
        this.taskAssignee = taskAssignee;
    }

    public HistoricTaskInstanceQueryDto taskAssigneeLike(String taskAssigneeLike) {
        this.taskAssigneeLike = taskAssigneeLike;
        return this;
    }

    /**
     * Restrict to tasks that are assigned to users with the parameter value as a substring.
     * @return taskAssigneeLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_ASSIGNEE_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskAssigneeLike() {
        return taskAssigneeLike;
    }

    @JsonProperty(JSON_PROPERTY_TASK_ASSIGNEE_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskAssigneeLike(String taskAssigneeLike) {
        this.taskAssigneeLike = taskAssigneeLike;
    }

    public HistoricTaskInstanceQueryDto taskOwner(String taskOwner) {
        this.taskOwner = taskOwner;
        return this;
    }

    /**
     * Restrict to tasks that the given user owns.
     * @return taskOwner
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_OWNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskOwner() {
        return taskOwner;
    }

    @JsonProperty(JSON_PROPERTY_TASK_OWNER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskOwner(String taskOwner) {
        this.taskOwner = taskOwner;
    }

    public HistoricTaskInstanceQueryDto taskOwnerLike(String taskOwnerLike) {
        this.taskOwnerLike = taskOwnerLike;
        return this;
    }

    /**
     * Restrict to tasks that are owned by users with the parameter value as a substring.
     * @return taskOwnerLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_OWNER_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskOwnerLike() {
        return taskOwnerLike;
    }

    @JsonProperty(JSON_PROPERTY_TASK_OWNER_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskOwnerLike(String taskOwnerLike) {
        this.taskOwnerLike = taskOwnerLike;
    }

    public HistoricTaskInstanceQueryDto taskPriority(Integer taskPriority) {
        this.taskPriority = taskPriority;
        return this;
    }

    /**
     * Restrict to tasks that have the given priority.
     * @return taskPriority
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_PRIORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTaskPriority() {
        return taskPriority;
    }

    @JsonProperty(JSON_PROPERTY_TASK_PRIORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskPriority(Integer taskPriority) {
        this.taskPriority = taskPriority;
    }

    public HistoricTaskInstanceQueryDto assigned(Boolean assigned) {
        this.assigned = assigned;
        return this;
    }

    /**
     * If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
     * @return assigned
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ASSIGNED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getAssigned() {
        return assigned;
    }

    @JsonProperty(JSON_PROPERTY_ASSIGNED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAssigned(Boolean assigned) {
        this.assigned = assigned;
    }

    public HistoricTaskInstanceQueryDto unassigned(Boolean unassigned) {
        this.unassigned = unassigned;
        return this;
    }

    /**
     * If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
     * @return unassigned
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_UNASSIGNED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUnassigned() {
        return unassigned;
    }

    @JsonProperty(JSON_PROPERTY_UNASSIGNED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUnassigned(Boolean unassigned) {
        this.unassigned = unassigned;
    }

    public HistoricTaskInstanceQueryDto finished(Boolean finished) {
        this.finished = finished;
        return this;
    }

    /**
     * Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return finished
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getFinished() {
        return finished;
    }

    @JsonProperty(JSON_PROPERTY_FINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFinished(Boolean finished) {
        this.finished = finished;
    }

    public HistoricTaskInstanceQueryDto unfinished(Boolean unfinished) {
        this.unfinished = unfinished;
        return this;
    }

    /**
     * Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return unfinished
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_UNFINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUnfinished() {
        return unfinished;
    }

    @JsonProperty(JSON_PROPERTY_UNFINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUnfinished(Boolean unfinished) {
        this.unfinished = unfinished;
    }

    public HistoricTaskInstanceQueryDto processFinished(Boolean processFinished) {
        this.processFinished = processFinished;
        return this;
    }

    /**
     * Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return processFinished
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_FINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getProcessFinished() {
        return processFinished;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_FINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessFinished(Boolean processFinished) {
        this.processFinished = processFinished;
    }

    public HistoricTaskInstanceQueryDto processUnfinished(Boolean processUnfinished) {
        this.processUnfinished = processUnfinished;
        return this;
    }

    /**
     * Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return processUnfinished
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_UNFINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getProcessUnfinished() {
        return processUnfinished;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_UNFINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessUnfinished(Boolean processUnfinished) {
        this.processUnfinished = processUnfinished;
    }

    public HistoricTaskInstanceQueryDto taskDueDate(OffsetDateTime taskDueDate) {
        this.taskDueDate = taskDueDate;
        return this;
    }

    /**
     * Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return taskDueDate
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DUE_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getTaskDueDate() {
        return taskDueDate;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DUE_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setTaskDueDate(OffsetDateTime taskDueDate) {
        this.taskDueDate = taskDueDate;
    }

    public HistoricTaskInstanceQueryDto taskDueDateBefore(OffsetDateTime taskDueDateBefore) {
        this.taskDueDateBefore = taskDueDateBefore;
        return this;
    }

    /**
     * Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return taskDueDateBefore
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DUE_DATE_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getTaskDueDateBefore() {
        return taskDueDateBefore;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DUE_DATE_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setTaskDueDateBefore(OffsetDateTime taskDueDateBefore) {
        this.taskDueDateBefore = taskDueDateBefore;
    }

    public HistoricTaskInstanceQueryDto taskDueDateAfter(OffsetDateTime taskDueDateAfter) {
        this.taskDueDateAfter = taskDueDateAfter;
        return this;
    }

    /**
     * Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return taskDueDateAfter
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_DUE_DATE_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getTaskDueDateAfter() {
        return taskDueDateAfter;
    }

    @JsonProperty(JSON_PROPERTY_TASK_DUE_DATE_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setTaskDueDateAfter(OffsetDateTime taskDueDateAfter) {
        this.taskDueDateAfter = taskDueDateAfter;
    }

    public HistoricTaskInstanceQueryDto withoutTaskDueDate(Boolean withoutTaskDueDate) {
        this.withoutTaskDueDate = withoutTaskDueDate;
        return this;
    }

    /**
     * Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return withoutTaskDueDate
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHOUT_TASK_DUE_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWithoutTaskDueDate() {
        return withoutTaskDueDate;
    }

    @JsonProperty(JSON_PROPERTY_WITHOUT_TASK_DUE_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithoutTaskDueDate(Boolean withoutTaskDueDate) {
        this.withoutTaskDueDate = withoutTaskDueDate;
    }

    public HistoricTaskInstanceQueryDto taskFollowUpDate(OffsetDateTime taskFollowUpDate) {
        this.taskFollowUpDate = taskFollowUpDate;
        return this;
    }

    /**
     * Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return taskFollowUpDate
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_FOLLOW_UP_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getTaskFollowUpDate() {
        return taskFollowUpDate;
    }

    @JsonProperty(JSON_PROPERTY_TASK_FOLLOW_UP_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setTaskFollowUpDate(OffsetDateTime taskFollowUpDate) {
        this.taskFollowUpDate = taskFollowUpDate;
    }

    public HistoricTaskInstanceQueryDto taskFollowUpDateBefore(OffsetDateTime taskFollowUpDateBefore) {
        this.taskFollowUpDateBefore = taskFollowUpDateBefore;
        return this;
    }

    /**
     * Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return taskFollowUpDateBefore
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_FOLLOW_UP_DATE_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getTaskFollowUpDateBefore() {
        return taskFollowUpDateBefore;
    }

    @JsonProperty(JSON_PROPERTY_TASK_FOLLOW_UP_DATE_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setTaskFollowUpDateBefore(OffsetDateTime taskFollowUpDateBefore) {
        this.taskFollowUpDateBefore = taskFollowUpDateBefore;
    }

    public HistoricTaskInstanceQueryDto taskFollowUpDateAfter(OffsetDateTime taskFollowUpDateAfter) {
        this.taskFollowUpDateAfter = taskFollowUpDateAfter;
        return this;
    }

    /**
     * Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return taskFollowUpDateAfter
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_FOLLOW_UP_DATE_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getTaskFollowUpDateAfter() {
        return taskFollowUpDateAfter;
    }

    @JsonProperty(JSON_PROPERTY_TASK_FOLLOW_UP_DATE_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setTaskFollowUpDateAfter(OffsetDateTime taskFollowUpDateAfter) {
        this.taskFollowUpDateAfter = taskFollowUpDateAfter;
    }

    public HistoricTaskInstanceQueryDto startedBefore(OffsetDateTime startedBefore) {
        this.startedBefore = startedBefore;
        return this;
    }

    /**
     * Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return startedBefore
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_STARTED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getStartedBefore() {
        return startedBefore;
    }

    @JsonProperty(JSON_PROPERTY_STARTED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setStartedBefore(OffsetDateTime startedBefore) {
        this.startedBefore = startedBefore;
    }

    public HistoricTaskInstanceQueryDto startedAfter(OffsetDateTime startedAfter) {
        this.startedAfter = startedAfter;
        return this;
    }

    /**
     * Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return startedAfter
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_STARTED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getStartedAfter() {
        return startedAfter;
    }

    @JsonProperty(JSON_PROPERTY_STARTED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setStartedAfter(OffsetDateTime startedAfter) {
        this.startedAfter = startedAfter;
    }

    public HistoricTaskInstanceQueryDto finishedBefore(OffsetDateTime finishedBefore) {
        this.finishedBefore = finishedBefore;
        return this;
    }

    /**
     * Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return finishedBefore
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FINISHED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getFinishedBefore() {
        return finishedBefore;
    }

    @JsonProperty(JSON_PROPERTY_FINISHED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setFinishedBefore(OffsetDateTime finishedBefore) {
        this.finishedBefore = finishedBefore;
    }

    public HistoricTaskInstanceQueryDto finishedAfter(OffsetDateTime finishedAfter) {
        this.finishedAfter = finishedAfter;
        return this;
    }

    /**
     * Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return finishedAfter
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FINISHED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getFinishedAfter() {
        return finishedAfter;
    }

    @JsonProperty(JSON_PROPERTY_FINISHED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setFinishedAfter(OffsetDateTime finishedAfter) {
        this.finishedAfter = finishedAfter;
    }

    public HistoricTaskInstanceQueryDto tenantIdIn(List<String> tenantIdIn) {
        this.tenantIdIn = tenantIdIn;
        return this;
    }

    public HistoricTaskInstanceQueryDto addTenantIdInItem(String tenantIdInItem) {
        if (this.tenantIdIn == null) {
            this.tenantIdIn = new ArrayList<>();
        }
        this.tenantIdIn.add(tenantIdInItem);
        return this;
    }

    /**
     * Filter by a  list of tenant ids. A task instance must have one of the given tenant ids.
     * @return tenantIdIn
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TENANT_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getTenantIdIn() {
        return tenantIdIn;
    }

    @JsonProperty(JSON_PROPERTY_TENANT_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTenantIdIn(List<String> tenantIdIn) {
        this.tenantIdIn = tenantIdIn;
    }

    public HistoricTaskInstanceQueryDto withoutTenantId(Boolean withoutTenantId) {
        this.withoutTenantId = withoutTenantId;
        return this;
    }

    /**
     * Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return withoutTenantId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWithoutTenantId() {
        return withoutTenantId;
    }

    @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithoutTenantId(Boolean withoutTenantId) {
        this.withoutTenantId = withoutTenantId;
    }

    public HistoricTaskInstanceQueryDto taskVariables(List<VariableQueryParameterDto> taskVariables) {
        this.taskVariables = taskVariables;
        return this;
    }

    public HistoricTaskInstanceQueryDto addTaskVariablesItem(VariableQueryParameterDto taskVariablesItem) {
        if (this.taskVariables == null) {
            this.taskVariables = new ArrayList<>();
        }
        this.taskVariables.add(taskVariablesItem);
        return this;
    }

    /**
     * Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @return taskVariables
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<VariableQueryParameterDto> getTaskVariables() {
        return taskVariables;
    }

    @JsonProperty(JSON_PROPERTY_TASK_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskVariables(List<VariableQueryParameterDto> taskVariables) {
        this.taskVariables = taskVariables;
    }

    public HistoricTaskInstanceQueryDto processVariables(List<VariableQueryParameterDto> processVariables) {
        this.processVariables = processVariables;
        return this;
    }

    public HistoricTaskInstanceQueryDto addProcessVariablesItem(VariableQueryParameterDto processVariablesItem) {
        if (this.processVariables == null) {
            this.processVariables = new ArrayList<>();
        }
        this.processVariables.add(processVariablesItem);
        return this;
    }

    /**
     * Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @return processVariables
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<VariableQueryParameterDto> getProcessVariables() {
        return processVariables;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessVariables(List<VariableQueryParameterDto> processVariables) {
        this.processVariables = processVariables;
    }

    public HistoricTaskInstanceQueryDto variableNamesIgnoreCase(Boolean variableNamesIgnoreCase) {
        this.variableNamesIgnoreCase = variableNamesIgnoreCase;
        return this;
    }

    /**
     * Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @return variableNamesIgnoreCase
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getVariableNamesIgnoreCase() {
        return variableNamesIgnoreCase;
    }

    @JsonProperty(JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVariableNamesIgnoreCase(Boolean variableNamesIgnoreCase) {
        this.variableNamesIgnoreCase = variableNamesIgnoreCase;
    }

    public HistoricTaskInstanceQueryDto variableValuesIgnoreCase(Boolean variableValuesIgnoreCase) {
        this.variableValuesIgnoreCase = variableValuesIgnoreCase;
        return this;
    }

    /**
     * Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @return variableValuesIgnoreCase
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getVariableValuesIgnoreCase() {
        return variableValuesIgnoreCase;
    }

    @JsonProperty(JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVariableValuesIgnoreCase(Boolean variableValuesIgnoreCase) {
        this.variableValuesIgnoreCase = variableValuesIgnoreCase;
    }

    public HistoricTaskInstanceQueryDto taskInvolvedUser(String taskInvolvedUser) {
        this.taskInvolvedUser = taskInvolvedUser;
        return this;
    }

    /**
     * Restrict to tasks with a historic identity link to the given user.
     * @return taskInvolvedUser
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_INVOLVED_USER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskInvolvedUser() {
        return taskInvolvedUser;
    }

    @JsonProperty(JSON_PROPERTY_TASK_INVOLVED_USER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskInvolvedUser(String taskInvolvedUser) {
        this.taskInvolvedUser = taskInvolvedUser;
    }

    public HistoricTaskInstanceQueryDto taskInvolvedGroup(String taskInvolvedGroup) {
        this.taskInvolvedGroup = taskInvolvedGroup;
        return this;
    }

    /**
     * Restrict to tasks with a historic identity link to the given group.
     * @return taskInvolvedGroup
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_INVOLVED_GROUP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskInvolvedGroup() {
        return taskInvolvedGroup;
    }

    @JsonProperty(JSON_PROPERTY_TASK_INVOLVED_GROUP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskInvolvedGroup(String taskInvolvedGroup) {
        this.taskInvolvedGroup = taskInvolvedGroup;
    }

    public HistoricTaskInstanceQueryDto taskHadCandidateUser(String taskHadCandidateUser) {
        this.taskHadCandidateUser = taskHadCandidateUser;
        return this;
    }

    /**
     * Restrict to tasks with a historic identity link to the given candidate user.
     * @return taskHadCandidateUser
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_HAD_CANDIDATE_USER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskHadCandidateUser() {
        return taskHadCandidateUser;
    }

    @JsonProperty(JSON_PROPERTY_TASK_HAD_CANDIDATE_USER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskHadCandidateUser(String taskHadCandidateUser) {
        this.taskHadCandidateUser = taskHadCandidateUser;
    }

    public HistoricTaskInstanceQueryDto taskHadCandidateGroup(String taskHadCandidateGroup) {
        this.taskHadCandidateGroup = taskHadCandidateGroup;
        return this;
    }

    /**
     * Restrict to tasks with a historic identity link to the given candidate group.
     * @return taskHadCandidateGroup
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_HAD_CANDIDATE_GROUP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskHadCandidateGroup() {
        return taskHadCandidateGroup;
    }

    @JsonProperty(JSON_PROPERTY_TASK_HAD_CANDIDATE_GROUP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskHadCandidateGroup(String taskHadCandidateGroup) {
        this.taskHadCandidateGroup = taskHadCandidateGroup;
    }

    public HistoricTaskInstanceQueryDto withCandidateGroups(Boolean withCandidateGroups) {
        this.withCandidateGroups = withCandidateGroups;
        return this;
    }

    /**
     * Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return withCandidateGroups
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITH_CANDIDATE_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWithCandidateGroups() {
        return withCandidateGroups;
    }

    @JsonProperty(JSON_PROPERTY_WITH_CANDIDATE_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithCandidateGroups(Boolean withCandidateGroups) {
        this.withCandidateGroups = withCandidateGroups;
    }

    public HistoricTaskInstanceQueryDto withoutCandidateGroups(Boolean withoutCandidateGroups) {
        this.withoutCandidateGroups = withoutCandidateGroups;
        return this;
    }

    /**
     * Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return withoutCandidateGroups
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHOUT_CANDIDATE_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWithoutCandidateGroups() {
        return withoutCandidateGroups;
    }

    @JsonProperty(JSON_PROPERTY_WITHOUT_CANDIDATE_GROUPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithoutCandidateGroups(Boolean withoutCandidateGroups) {
        this.withoutCandidateGroups = withoutCandidateGroups;
    }

    public HistoricTaskInstanceQueryDto orQueries(List<HistoricTaskInstanceQueryDto> orQueries) {
        this.orQueries = orQueries;
        return this;
    }

    public HistoricTaskInstanceQueryDto addOrQueriesItem(HistoricTaskInstanceQueryDto orQueriesItem) {
        if (this.orQueries == null) {
            this.orQueries = new ArrayList<>();
        }
        this.orQueries.add(orQueriesItem);
        return this;
    }

    /**
     * A JSON array of nested historic task instance queries with OR semantics.  A task instance matches a nested query if it fulfills at least one of the query&#39;s predicates.  With multiple nested queries, a task instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All task instance query properties can be used except for: &#x60;sorting&#x60;, &#x60;withCandidateGroups&#x60;, &#x60; withoutCandidateGroups&#x60;.  See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
     * @return orQueries
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_OR_QUERIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<HistoricTaskInstanceQueryDto> getOrQueries() {
        return orQueries;
    }

    @JsonProperty(JSON_PROPERTY_OR_QUERIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOrQueries(List<HistoricTaskInstanceQueryDto> orQueries) {
        this.orQueries = orQueries;
    }

    public HistoricTaskInstanceQueryDto sorting(List<HistoricTaskInstanceQueryDtoSortingInner> sorting) {
        this.sorting = sorting;
        return this;
    }

    public HistoricTaskInstanceQueryDto addSortingItem(HistoricTaskInstanceQueryDtoSortingInner sortingItem) {
        if (this.sorting == null) {
            this.sorting = new ArrayList<>();
        }
        this.sorting.add(sortingItem);
        return this;
    }

    /**
     * An array of criteria to sort the result by. Each element of the array is                     an object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Sorting has no effect for &#x60;count&#x60; endpoints
     * @return sorting
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SORTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<HistoricTaskInstanceQueryDtoSortingInner> getSorting() {
        return sorting;
    }

    @JsonProperty(JSON_PROPERTY_SORTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSorting(List<HistoricTaskInstanceQueryDtoSortingInner> sorting) {
        this.sorting = sorting;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = (HistoricTaskInstanceQueryDto) o;
        return Objects.equals(this.taskId, historicTaskInstanceQueryDto.taskId) &&
            Objects.equals(this.taskParentTaskId, historicTaskInstanceQueryDto.taskParentTaskId) &&
            Objects.equals(this.processInstanceId, historicTaskInstanceQueryDto.processInstanceId) &&
            Objects.equals(this.processInstanceBusinessKey, historicTaskInstanceQueryDto.processInstanceBusinessKey) &&
            Objects.equals(this.processInstanceBusinessKeyIn, historicTaskInstanceQueryDto.processInstanceBusinessKeyIn) &&
            Objects.equals(this.processInstanceBusinessKeyLike, historicTaskInstanceQueryDto.processInstanceBusinessKeyLike) &&
            Objects.equals(this.executionId, historicTaskInstanceQueryDto.executionId) &&
            Objects.equals(this.processDefinitionId, historicTaskInstanceQueryDto.processDefinitionId) &&
            Objects.equals(this.processDefinitionKey, historicTaskInstanceQueryDto.processDefinitionKey) &&
            Objects.equals(this.processDefinitionName, historicTaskInstanceQueryDto.processDefinitionName) &&
            Objects.equals(this.caseInstanceId, historicTaskInstanceQueryDto.caseInstanceId) &&
            Objects.equals(this.caseExecutionId, historicTaskInstanceQueryDto.caseExecutionId) &&
            Objects.equals(this.caseDefinitionId, historicTaskInstanceQueryDto.caseDefinitionId) &&
            Objects.equals(this.caseDefinitionKey, historicTaskInstanceQueryDto.caseDefinitionKey) &&
            Objects.equals(this.caseDefinitionName, historicTaskInstanceQueryDto.caseDefinitionName) &&
            Objects.equals(this.activityInstanceIdIn, historicTaskInstanceQueryDto.activityInstanceIdIn) &&
            Objects.equals(this.taskName, historicTaskInstanceQueryDto.taskName) &&
            Objects.equals(this.taskNameLike, historicTaskInstanceQueryDto.taskNameLike) &&
            Objects.equals(this.taskDescription, historicTaskInstanceQueryDto.taskDescription) &&
            Objects.equals(this.taskDescriptionLike, historicTaskInstanceQueryDto.taskDescriptionLike) &&
            Objects.equals(this.taskDefinitionKey, historicTaskInstanceQueryDto.taskDefinitionKey) &&
            Objects.equals(this.taskDefinitionKeyIn, historicTaskInstanceQueryDto.taskDefinitionKeyIn) &&
            Objects.equals(this.taskDeleteReason, historicTaskInstanceQueryDto.taskDeleteReason) &&
            Objects.equals(this.taskDeleteReasonLike, historicTaskInstanceQueryDto.taskDeleteReasonLike) &&
            Objects.equals(this.taskAssignee, historicTaskInstanceQueryDto.taskAssignee) &&
            Objects.equals(this.taskAssigneeLike, historicTaskInstanceQueryDto.taskAssigneeLike) &&
            Objects.equals(this.taskOwner, historicTaskInstanceQueryDto.taskOwner) &&
            Objects.equals(this.taskOwnerLike, historicTaskInstanceQueryDto.taskOwnerLike) &&
            Objects.equals(this.taskPriority, historicTaskInstanceQueryDto.taskPriority) &&
            Objects.equals(this.assigned, historicTaskInstanceQueryDto.assigned) &&
            Objects.equals(this.unassigned, historicTaskInstanceQueryDto.unassigned) &&
            Objects.equals(this.finished, historicTaskInstanceQueryDto.finished) &&
            Objects.equals(this.unfinished, historicTaskInstanceQueryDto.unfinished) &&
            Objects.equals(this.processFinished, historicTaskInstanceQueryDto.processFinished) &&
            Objects.equals(this.processUnfinished, historicTaskInstanceQueryDto.processUnfinished) &&
            Objects.equals(this.taskDueDate, historicTaskInstanceQueryDto.taskDueDate) &&
            Objects.equals(this.taskDueDateBefore, historicTaskInstanceQueryDto.taskDueDateBefore) &&
            Objects.equals(this.taskDueDateAfter, historicTaskInstanceQueryDto.taskDueDateAfter) &&
            Objects.equals(this.withoutTaskDueDate, historicTaskInstanceQueryDto.withoutTaskDueDate) &&
            Objects.equals(this.taskFollowUpDate, historicTaskInstanceQueryDto.taskFollowUpDate) &&
            Objects.equals(this.taskFollowUpDateBefore, historicTaskInstanceQueryDto.taskFollowUpDateBefore) &&
            Objects.equals(this.taskFollowUpDateAfter, historicTaskInstanceQueryDto.taskFollowUpDateAfter) &&
            Objects.equals(this.startedBefore, historicTaskInstanceQueryDto.startedBefore) &&
            Objects.equals(this.startedAfter, historicTaskInstanceQueryDto.startedAfter) &&
            Objects.equals(this.finishedBefore, historicTaskInstanceQueryDto.finishedBefore) &&
            Objects.equals(this.finishedAfter, historicTaskInstanceQueryDto.finishedAfter) &&
            Objects.equals(this.tenantIdIn, historicTaskInstanceQueryDto.tenantIdIn) &&
            Objects.equals(this.withoutTenantId, historicTaskInstanceQueryDto.withoutTenantId) &&
            Objects.equals(this.taskVariables, historicTaskInstanceQueryDto.taskVariables) &&
            Objects.equals(this.processVariables, historicTaskInstanceQueryDto.processVariables) &&
            Objects.equals(this.variableNamesIgnoreCase, historicTaskInstanceQueryDto.variableNamesIgnoreCase) &&
            Objects.equals(this.variableValuesIgnoreCase, historicTaskInstanceQueryDto.variableValuesIgnoreCase) &&
            Objects.equals(this.taskInvolvedUser, historicTaskInstanceQueryDto.taskInvolvedUser) &&
            Objects.equals(this.taskInvolvedGroup, historicTaskInstanceQueryDto.taskInvolvedGroup) &&
            Objects.equals(this.taskHadCandidateUser, historicTaskInstanceQueryDto.taskHadCandidateUser) &&
            Objects.equals(this.taskHadCandidateGroup, historicTaskInstanceQueryDto.taskHadCandidateGroup) &&
            Objects.equals(this.withCandidateGroups, historicTaskInstanceQueryDto.withCandidateGroups) &&
            Objects.equals(this.withoutCandidateGroups, historicTaskInstanceQueryDto.withoutCandidateGroups) &&
            Objects.equals(this.orQueries, historicTaskInstanceQueryDto.orQueries) &&
            Objects.equals(this.sorting, historicTaskInstanceQueryDto.sorting);
    }

    @Override
    public int hashCode() {
        return Objects.hash(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups, orQueries, sorting);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HistoricTaskInstanceQueryDto {\n");
        sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
        sb.append("    taskParentTaskId: ").append(toIndentedString(taskParentTaskId)).append("\n");
        sb.append("    processInstanceId: ").append(toIndentedString(processInstanceId)).append("\n");
        sb.append("    processInstanceBusinessKey: ").append(toIndentedString(processInstanceBusinessKey)).append("\n");
        sb.append("    processInstanceBusinessKeyIn: ").append(toIndentedString(processInstanceBusinessKeyIn)).append("\n");
        sb.append("    processInstanceBusinessKeyLike: ").append(toIndentedString(processInstanceBusinessKeyLike)).append("\n");
        sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
        sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
        sb.append("    processDefinitionKey: ").append(toIndentedString(processDefinitionKey)).append("\n");
        sb.append("    processDefinitionName: ").append(toIndentedString(processDefinitionName)).append("\n");
        sb.append("    caseInstanceId: ").append(toIndentedString(caseInstanceId)).append("\n");
        sb.append("    caseExecutionId: ").append(toIndentedString(caseExecutionId)).append("\n");
        sb.append("    caseDefinitionId: ").append(toIndentedString(caseDefinitionId)).append("\n");
        sb.append("    caseDefinitionKey: ").append(toIndentedString(caseDefinitionKey)).append("\n");
        sb.append("    caseDefinitionName: ").append(toIndentedString(caseDefinitionName)).append("\n");
        sb.append("    activityInstanceIdIn: ").append(toIndentedString(activityInstanceIdIn)).append("\n");
        sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
        sb.append("    taskNameLike: ").append(toIndentedString(taskNameLike)).append("\n");
        sb.append("    taskDescription: ").append(toIndentedString(taskDescription)).append("\n");
        sb.append("    taskDescriptionLike: ").append(toIndentedString(taskDescriptionLike)).append("\n");
        sb.append("    taskDefinitionKey: ").append(toIndentedString(taskDefinitionKey)).append("\n");
        sb.append("    taskDefinitionKeyIn: ").append(toIndentedString(taskDefinitionKeyIn)).append("\n");
        sb.append("    taskDeleteReason: ").append(toIndentedString(taskDeleteReason)).append("\n");
        sb.append("    taskDeleteReasonLike: ").append(toIndentedString(taskDeleteReasonLike)).append("\n");
        sb.append("    taskAssignee: ").append(toIndentedString(taskAssignee)).append("\n");
        sb.append("    taskAssigneeLike: ").append(toIndentedString(taskAssigneeLike)).append("\n");
        sb.append("    taskOwner: ").append(toIndentedString(taskOwner)).append("\n");
        sb.append("    taskOwnerLike: ").append(toIndentedString(taskOwnerLike)).append("\n");
        sb.append("    taskPriority: ").append(toIndentedString(taskPriority)).append("\n");
        sb.append("    assigned: ").append(toIndentedString(assigned)).append("\n");
        sb.append("    unassigned: ").append(toIndentedString(unassigned)).append("\n");
        sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
        sb.append("    unfinished: ").append(toIndentedString(unfinished)).append("\n");
        sb.append("    processFinished: ").append(toIndentedString(processFinished)).append("\n");
        sb.append("    processUnfinished: ").append(toIndentedString(processUnfinished)).append("\n");
        sb.append("    taskDueDate: ").append(toIndentedString(taskDueDate)).append("\n");
        sb.append("    taskDueDateBefore: ").append(toIndentedString(taskDueDateBefore)).append("\n");
        sb.append("    taskDueDateAfter: ").append(toIndentedString(taskDueDateAfter)).append("\n");
        sb.append("    withoutTaskDueDate: ").append(toIndentedString(withoutTaskDueDate)).append("\n");
        sb.append("    taskFollowUpDate: ").append(toIndentedString(taskFollowUpDate)).append("\n");
        sb.append("    taskFollowUpDateBefore: ").append(toIndentedString(taskFollowUpDateBefore)).append("\n");
        sb.append("    taskFollowUpDateAfter: ").append(toIndentedString(taskFollowUpDateAfter)).append("\n");
        sb.append("    startedBefore: ").append(toIndentedString(startedBefore)).append("\n");
        sb.append("    startedAfter: ").append(toIndentedString(startedAfter)).append("\n");
        sb.append("    finishedBefore: ").append(toIndentedString(finishedBefore)).append("\n");
        sb.append("    finishedAfter: ").append(toIndentedString(finishedAfter)).append("\n");
        sb.append("    tenantIdIn: ").append(toIndentedString(tenantIdIn)).append("\n");
        sb.append("    withoutTenantId: ").append(toIndentedString(withoutTenantId)).append("\n");
        sb.append("    taskVariables: ").append(toIndentedString(taskVariables)).append("\n");
        sb.append("    processVariables: ").append(toIndentedString(processVariables)).append("\n");
        sb.append("    variableNamesIgnoreCase: ").append(toIndentedString(variableNamesIgnoreCase)).append("\n");
        sb.append("    variableValuesIgnoreCase: ").append(toIndentedString(variableValuesIgnoreCase)).append("\n");
        sb.append("    taskInvolvedUser: ").append(toIndentedString(taskInvolvedUser)).append("\n");
        sb.append("    taskInvolvedGroup: ").append(toIndentedString(taskInvolvedGroup)).append("\n");
        sb.append("    taskHadCandidateUser: ").append(toIndentedString(taskHadCandidateUser)).append("\n");
        sb.append("    taskHadCandidateGroup: ").append(toIndentedString(taskHadCandidateGroup)).append("\n");
        sb.append("    withCandidateGroups: ").append(toIndentedString(withCandidateGroups)).append("\n");
        sb.append("    withoutCandidateGroups: ").append(toIndentedString(withoutCandidateGroups)).append("\n");
        sb.append("    orQueries: ").append(toIndentedString(orQueries)).append("\n");
        sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

