/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A group instance query which defines a list of group instances
 */
@JsonPropertyOrder({
  GroupQueryDto.JSON_PROPERTY_ID,
  GroupQueryDto.JSON_PROPERTY_ID_IN,
  GroupQueryDto.JSON_PROPERTY_NAME,
  GroupQueryDto.JSON_PROPERTY_NAME_LIKE,
  GroupQueryDto.JSON_PROPERTY_TYPE,
  GroupQueryDto.JSON_PROPERTY_MEMBER,
  GroupQueryDto.JSON_PROPERTY_MEMBER_OF_TENANT,
  GroupQueryDto.JSON_PROPERTY_SORTING
})
@JsonTypeName("GroupQueryDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class GroupQueryDto {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_ID_IN = "idIn";
    private List<String> idIn = null;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_NAME_LIKE = "nameLike";
    private String nameLike;

    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public static final String JSON_PROPERTY_MEMBER = "member";
    private String member;

    public static final String JSON_PROPERTY_MEMBER_OF_TENANT = "memberOfTenant";
    private String memberOfTenant;

    public static final String JSON_PROPERTY_SORTING = "sorting";
    private List<GroupQueryDtoSortingInner> sorting = null;

    public GroupQueryDto() {
    }

    public GroupQueryDto id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Filter by the id of the group.
     * @return id
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public GroupQueryDto idIn(List<String> idIn) {
        this.idIn = idIn;
        return this;
    }

    public GroupQueryDto addIdInItem(String idInItem) {
        if (this.idIn == null) {
            this.idIn = new ArrayList<>();
        }
        this.idIn.add(idInItem);
        return this;
    }

    /**
     * Filter by a JSON string array of group ids.
     * @return idIn
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getIdIn() {
        return idIn;
    }

    @JsonProperty(JSON_PROPERTY_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIdIn(List<String> idIn) {
        this.idIn = idIn;
    }

    public GroupQueryDto name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Filter by the name of the group.
     * @return name
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public GroupQueryDto nameLike(String nameLike) {
        this.nameLike = nameLike;
        return this;
    }

    /**
     * Filter by the name that the parameter is a substring of.
     * @return nameLike
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_NAME_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNameLike() {
        return nameLike;
    }

    @JsonProperty(JSON_PROPERTY_NAME_LIKE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNameLike(String nameLike) {
        this.nameLike = nameLike;
    }

    public GroupQueryDto type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Filter by the type of the group.
     * @return type
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    public GroupQueryDto member(String member) {
        this.member = member;
        return this;
    }

    /**
     * Only retrieve groups where the given user id is a member of.
     * @return member
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MEMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMember() {
        return member;
    }

    @JsonProperty(JSON_PROPERTY_MEMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMember(String member) {
        this.member = member;
    }

    public GroupQueryDto memberOfTenant(String memberOfTenant) {
        this.memberOfTenant = memberOfTenant;
        return this;
    }

    /**
     * Only retrieve groups which are members of the given tenant.
     * @return memberOfTenant
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MEMBER_OF_TENANT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMemberOfTenant() {
        return memberOfTenant;
    }

    @JsonProperty(JSON_PROPERTY_MEMBER_OF_TENANT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMemberOfTenant(String memberOfTenant) {
        this.memberOfTenant = memberOfTenant;
    }

    public GroupQueryDto sorting(List<GroupQueryDtoSortingInner> sorting) {
        this.sorting = sorting;
        return this;
    }

    public GroupQueryDto addSortingItem(GroupQueryDtoSortingInner sortingItem) {
        if (this.sorting == null) {
            this.sorting = new ArrayList<>();
        }
        this.sorting.add(sortingItem);
        return this;
    }

    /**
     * Apply sorting of the result
     * @return sorting
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SORTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<GroupQueryDtoSortingInner> getSorting() {
        return sorting;
    }

    @JsonProperty(JSON_PROPERTY_SORTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSorting(List<GroupQueryDtoSortingInner> sorting) {
        this.sorting = sorting;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GroupQueryDto groupQueryDto = (GroupQueryDto) o;
        return Objects.equals(this.id, groupQueryDto.id) &&
            Objects.equals(this.idIn, groupQueryDto.idIn) &&
            Objects.equals(this.name, groupQueryDto.name) &&
            Objects.equals(this.nameLike, groupQueryDto.nameLike) &&
            Objects.equals(this.type, groupQueryDto.type) &&
            Objects.equals(this.member, groupQueryDto.member) &&
            Objects.equals(this.memberOfTenant, groupQueryDto.memberOfTenant) &&
            Objects.equals(this.sorting, groupQueryDto.sorting);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, idIn, name, nameLike, type, member, memberOfTenant, sorting);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GroupQueryDto {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    idIn: ").append(toIndentedString(idIn)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    nameLike: ").append(toIndentedString(nameLike)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    member: ").append(toIndentedString(member)).append("\n");
        sb.append("    memberOfTenant: ").append(toIndentedString(memberOfTenant)).append("\n");
        sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

