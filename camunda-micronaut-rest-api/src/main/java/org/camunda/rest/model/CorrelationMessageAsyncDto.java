/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.*;

/**
 * CorrelationMessageAsyncDto
 */
@JsonPropertyOrder({
  CorrelationMessageAsyncDto.JSON_PROPERTY_MESSAGE_NAME,
  CorrelationMessageAsyncDto.JSON_PROPERTY_PROCESS_INSTANCE_IDS,
  CorrelationMessageAsyncDto.JSON_PROPERTY_PROCESS_INSTANCE_QUERY,
  CorrelationMessageAsyncDto.JSON_PROPERTY_HISTORIC_PROCESS_INSTANCE_QUERY,
  CorrelationMessageAsyncDto.JSON_PROPERTY_VARIABLES
})
@JsonTypeName("CorrelationMessageAsyncDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class CorrelationMessageAsyncDto {
    public static final String JSON_PROPERTY_MESSAGE_NAME = "messageName";
    private String messageName;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_IDS = "processInstanceIds";
    private List<String> processInstanceIds = null;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_QUERY = "processInstanceQuery";
    private ProcessInstanceQueryDto processInstanceQuery;

    public static final String JSON_PROPERTY_HISTORIC_PROCESS_INSTANCE_QUERY = "historicProcessInstanceQuery";
    private HistoricProcessInstanceQueryDto historicProcessInstanceQuery;

    public static final String JSON_PROPERTY_VARIABLES = "variables";
    private Map<String, VariableValueDto> variables = null;

    public CorrelationMessageAsyncDto() {
    }

    public CorrelationMessageAsyncDto messageName(String messageName) {
        this.messageName = messageName;
        return this;
    }

    /**
     * The name of the message to correlate. Corresponds to the &#39;name&#39; element of the message defined in BPMN 2.0 XML. Can be null to correlate by other criteria only.
     * @return messageName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessageName() {
        return messageName;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessageName(String messageName) {
        this.messageName = messageName;
    }

    public CorrelationMessageAsyncDto processInstanceIds(List<String> processInstanceIds) {
        this.processInstanceIds = processInstanceIds;
        return this;
    }

    public CorrelationMessageAsyncDto addProcessInstanceIdsItem(String processInstanceIdsItem) {
        if (this.processInstanceIds == null) {
            this.processInstanceIds = new ArrayList<>();
        }
        this.processInstanceIds.add(processInstanceIdsItem);
        return this;
    }

    /**
     * A list of process instance ids that define a group of process instances to which the operation will correlate a message.  Please note that if &#x60;processInstanceIds&#x60;, &#x60;processInstanceQuery&#x60; and &#x60;historicProcessInstanceQuery&#x60; are defined, the resulting operation will be performed on the union of these sets.
     * @return processInstanceIds
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getProcessInstanceIds() {
        return processInstanceIds;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceIds(List<String> processInstanceIds) {
        this.processInstanceIds = processInstanceIds;
    }

    public CorrelationMessageAsyncDto processInstanceQuery(ProcessInstanceQueryDto processInstanceQuery) {
        this.processInstanceQuery = processInstanceQuery;
        return this;
    }

    /**
     * Get processInstanceQuery
     * @return processInstanceQuery
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_QUERY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ProcessInstanceQueryDto getProcessInstanceQuery() {
        return processInstanceQuery;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_QUERY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceQuery(ProcessInstanceQueryDto processInstanceQuery) {
        this.processInstanceQuery = processInstanceQuery;
    }

    public CorrelationMessageAsyncDto historicProcessInstanceQuery(HistoricProcessInstanceQueryDto historicProcessInstanceQuery) {
        this.historicProcessInstanceQuery = historicProcessInstanceQuery;
        return this;
    }

    /**
     * Get historicProcessInstanceQuery
     * @return historicProcessInstanceQuery
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_HISTORIC_PROCESS_INSTANCE_QUERY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public HistoricProcessInstanceQueryDto getHistoricProcessInstanceQuery() {
        return historicProcessInstanceQuery;
    }

    @JsonProperty(JSON_PROPERTY_HISTORIC_PROCESS_INSTANCE_QUERY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHistoricProcessInstanceQuery(HistoricProcessInstanceQueryDto historicProcessInstanceQuery) {
        this.historicProcessInstanceQuery = historicProcessInstanceQuery;
    }

    public CorrelationMessageAsyncDto variables(Map<String, VariableValueDto> variables) {
        this.variables = variables;
        return this;
    }

    public CorrelationMessageAsyncDto putVariablesItem(String key, VariableValueDto variablesItem) {
        if (this.variables == null) {
            this.variables = new HashMap<>();
        }
        this.variables.put(key, variablesItem);
        return this;
  }

    /**
     * All variables the operation will set in the root scope of the process instances the message is correlated to.
     * @return variables
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, VariableValueDto> getVariables() {
        return variables;
    }

    @JsonProperty(JSON_PROPERTY_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVariables(Map<String, VariableValueDto> variables) {
        this.variables = variables;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorrelationMessageAsyncDto correlationMessageAsyncDto = (CorrelationMessageAsyncDto) o;
        return Objects.equals(this.messageName, correlationMessageAsyncDto.messageName) &&
            Objects.equals(this.processInstanceIds, correlationMessageAsyncDto.processInstanceIds) &&
            Objects.equals(this.processInstanceQuery, correlationMessageAsyncDto.processInstanceQuery) &&
            Objects.equals(this.historicProcessInstanceQuery, correlationMessageAsyncDto.historicProcessInstanceQuery) &&
            Objects.equals(this.variables, correlationMessageAsyncDto.variables);
    }

    @Override
    public int hashCode() {
        return Objects.hash(messageName, processInstanceIds, processInstanceQuery, historicProcessInstanceQuery, variables);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorrelationMessageAsyncDto {\n");
        sb.append("    messageName: ").append(toIndentedString(messageName)).append("\n");
        sb.append("    processInstanceIds: ").append(toIndentedString(processInstanceIds)).append("\n");
        sb.append("    processInstanceQuery: ").append(toIndentedString(processInstanceQuery)).append("\n");
        sb.append("    historicProcessInstanceQuery: ").append(toIndentedString(historicProcessInstanceQuery)).append("\n");
        sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

