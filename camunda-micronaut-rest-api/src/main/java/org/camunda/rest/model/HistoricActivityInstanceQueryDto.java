/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A historic activity instance query which defines a group of historic activity instances
 */
@JsonPropertyOrder({
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_ACTIVITY_INSTANCE_ID,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_ID,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_EXECUTION_ID,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_ACTIVITY_ID,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_ACTIVITY_NAME,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_ACTIVITY_TYPE,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_TASK_ASSIGNEE,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_FINISHED,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_UNFINISHED,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_CANCELED,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_COMPLETE_SCOPE,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_STARTED_BEFORE,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_STARTED_AFTER,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_FINISHED_BEFORE,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_FINISHED_AFTER,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_TENANT_ID_IN,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_WITHOUT_TENANT_ID,
  HistoricActivityInstanceQueryDto.JSON_PROPERTY_SORTING
})
@JsonTypeName("HistoricActivityInstanceQueryDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class HistoricActivityInstanceQueryDto {
    public static final String JSON_PROPERTY_ACTIVITY_INSTANCE_ID = "activityInstanceId";
    private String activityInstanceId;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_ID = "processInstanceId";
    private String processInstanceId;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
    private String processDefinitionId;

    public static final String JSON_PROPERTY_EXECUTION_ID = "executionId";
    private String executionId;

    public static final String JSON_PROPERTY_ACTIVITY_ID = "activityId";
    private String activityId;

    public static final String JSON_PROPERTY_ACTIVITY_NAME = "activityName";
    private String activityName;

    public static final String JSON_PROPERTY_ACTIVITY_TYPE = "activityType";
    private String activityType;

    public static final String JSON_PROPERTY_TASK_ASSIGNEE = "taskAssignee";
    private String taskAssignee;

    public static final String JSON_PROPERTY_FINISHED = "finished";
    private Boolean finished;

    public static final String JSON_PROPERTY_UNFINISHED = "unfinished";
    private Boolean unfinished;

    public static final String JSON_PROPERTY_CANCELED = "canceled";
    private Boolean canceled;

    public static final String JSON_PROPERTY_COMPLETE_SCOPE = "completeScope";
    private Boolean completeScope;

    public static final String JSON_PROPERTY_STARTED_BEFORE = "startedBefore";
    private OffsetDateTime startedBefore;

    public static final String JSON_PROPERTY_STARTED_AFTER = "startedAfter";
    private OffsetDateTime startedAfter;

    public static final String JSON_PROPERTY_FINISHED_BEFORE = "finishedBefore";
    private OffsetDateTime finishedBefore;

    public static final String JSON_PROPERTY_FINISHED_AFTER = "finishedAfter";
    private OffsetDateTime finishedAfter;

    public static final String JSON_PROPERTY_TENANT_ID_IN = "tenantIdIn";
    private List<String> tenantIdIn = null;

    public static final String JSON_PROPERTY_WITHOUT_TENANT_ID = "withoutTenantId";
    private Boolean withoutTenantId;

    public static final String JSON_PROPERTY_SORTING = "sorting";
    private List<HistoricActivityInstanceQueryDtoSortingInner> sorting = null;

    public HistoricActivityInstanceQueryDto() {
    }

    public HistoricActivityInstanceQueryDto activityInstanceId(String activityInstanceId) {
        this.activityInstanceId = activityInstanceId;
        return this;
    }

    /**
     * Filter by activity instance id.
     * @return activityInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getActivityInstanceId() {
        return activityInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityInstanceId(String activityInstanceId) {
        this.activityInstanceId = activityInstanceId;
    }

    public HistoricActivityInstanceQueryDto processInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
        return this;
    }

    /**
     * Filter by process instance id.
     * @return processInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessInstanceId() {
        return processInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public HistoricActivityInstanceQueryDto processDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
        return this;
    }

    /**
     * Filter by process definition id.
     * @return processDefinitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionId() {
        return processDefinitionId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
    }

    public HistoricActivityInstanceQueryDto executionId(String executionId) {
        this.executionId = executionId;
        return this;
    }

    /**
     * Filter by the id of the execution that executed the activity instance.
     * @return executionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getExecutionId() {
        return executionId;
    }

    @JsonProperty(JSON_PROPERTY_EXECUTION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setExecutionId(String executionId) {
        this.executionId = executionId;
    }

    public HistoricActivityInstanceQueryDto activityId(String activityId) {
        this.activityId = activityId;
        return this;
    }

    /**
     * Filter by the activity id (according to BPMN 2.0 XML).
     * @return activityId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getActivityId() {
        return activityId;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    public HistoricActivityInstanceQueryDto activityName(String activityName) {
        this.activityName = activityName;
        return this;
    }

    /**
     * Filter by the activity name (according to BPMN 2.0 XML).
     * @return activityName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getActivityName() {
        return activityName;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityName(String activityName) {
        this.activityName = activityName;
    }

    public HistoricActivityInstanceQueryDto activityType(String activityType) {
        this.activityType = activityType;
        return this;
    }

    /**
     * Filter by activity type.
     * @return activityType
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getActivityType() {
        return activityType;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityType(String activityType) {
        this.activityType = activityType;
    }

    public HistoricActivityInstanceQueryDto taskAssignee(String taskAssignee) {
        this.taskAssignee = taskAssignee;
        return this;
    }

    /**
     * Only include activity instances that are user tasks and assigned to a given user.
     * @return taskAssignee
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_ASSIGNEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskAssignee() {
        return taskAssignee;
    }

    @JsonProperty(JSON_PROPERTY_TASK_ASSIGNEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskAssignee(String taskAssignee) {
        this.taskAssignee = taskAssignee;
    }

    public HistoricActivityInstanceQueryDto finished(Boolean finished) {
        this.finished = finished;
        return this;
    }

    /**
     * Only include finished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @return finished
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getFinished() {
        return finished;
    }

    @JsonProperty(JSON_PROPERTY_FINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFinished(Boolean finished) {
        this.finished = finished;
    }

    public HistoricActivityInstanceQueryDto unfinished(Boolean unfinished) {
        this.unfinished = unfinished;
        return this;
    }

    /**
     * Only include unfinished activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @return unfinished
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_UNFINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUnfinished() {
        return unfinished;
    }

    @JsonProperty(JSON_PROPERTY_UNFINISHED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUnfinished(Boolean unfinished) {
        this.unfinished = unfinished;
    }

    public HistoricActivityInstanceQueryDto canceled(Boolean canceled) {
        this.canceled = canceled;
        return this;
    }

    /**
     * Only include canceled activity instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @return canceled
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CANCELED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCanceled() {
        return canceled;
    }

    @JsonProperty(JSON_PROPERTY_CANCELED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCanceled(Boolean canceled) {
        this.canceled = canceled;
    }

    public HistoricActivityInstanceQueryDto completeScope(Boolean completeScope) {
        this.completeScope = completeScope;
        return this;
    }

    /**
     * Only include activity instances which completed a scope. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; behaves the same as when the property is not set.
     * @return completeScope
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_COMPLETE_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCompleteScope() {
        return completeScope;
    }

    @JsonProperty(JSON_PROPERTY_COMPLETE_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCompleteScope(Boolean completeScope) {
        this.completeScope = completeScope;
    }

    public HistoricActivityInstanceQueryDto startedBefore(OffsetDateTime startedBefore) {
        this.startedBefore = startedBefore;
        return this;
    }

    /**
     * Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return startedBefore
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_STARTED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getStartedBefore() {
        return startedBefore;
    }

    @JsonProperty(JSON_PROPERTY_STARTED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setStartedBefore(OffsetDateTime startedBefore) {
        this.startedBefore = startedBefore;
    }

    public HistoricActivityInstanceQueryDto startedAfter(OffsetDateTime startedAfter) {
        this.startedAfter = startedAfter;
        return this;
    }

    /**
     * Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return startedAfter
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_STARTED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getStartedAfter() {
        return startedAfter;
    }

    @JsonProperty(JSON_PROPERTY_STARTED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setStartedAfter(OffsetDateTime startedAfter) {
        this.startedAfter = startedAfter;
    }

    public HistoricActivityInstanceQueryDto finishedBefore(OffsetDateTime finishedBefore) {
        this.finishedBefore = finishedBefore;
        return this;
    }

    /**
     * Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return finishedBefore
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FINISHED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getFinishedBefore() {
        return finishedBefore;
    }

    @JsonProperty(JSON_PROPERTY_FINISHED_BEFORE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setFinishedBefore(OffsetDateTime finishedBefore) {
        this.finishedBefore = finishedBefore;
    }

    public HistoricActivityInstanceQueryDto finishedAfter(OffsetDateTime finishedAfter) {
        this.finishedAfter = finishedAfter;
        return this;
    }

    /**
     * Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @return finishedAfter
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FINISHED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getFinishedAfter() {
        return finishedAfter;
    }

    @JsonProperty(JSON_PROPERTY_FINISHED_AFTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setFinishedAfter(OffsetDateTime finishedAfter) {
        this.finishedAfter = finishedAfter;
    }

    public HistoricActivityInstanceQueryDto tenantIdIn(List<String> tenantIdIn) {
        this.tenantIdIn = tenantIdIn;
        return this;
    }

    public HistoricActivityInstanceQueryDto addTenantIdInItem(String tenantIdInItem) {
        if (this.tenantIdIn == null) {
            this.tenantIdIn = new ArrayList<>();
        }
        this.tenantIdIn.add(tenantIdInItem);
        return this;
    }

    /**
     * Must be a JSON array of Strings. An activity instance must have one of the given tenant ids.
     * @return tenantIdIn
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TENANT_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getTenantIdIn() {
        return tenantIdIn;
    }

    @JsonProperty(JSON_PROPERTY_TENANT_ID_IN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTenantIdIn(List<String> tenantIdIn) {
        this.tenantIdIn = tenantIdIn;
    }

    public HistoricActivityInstanceQueryDto withoutTenantId(Boolean withoutTenantId) {
        this.withoutTenantId = withoutTenantId;
        return this;
    }

    /**
     * Only include historic activity instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @return withoutTenantId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWithoutTenantId() {
        return withoutTenantId;
    }

    @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithoutTenantId(Boolean withoutTenantId) {
        this.withoutTenantId = withoutTenantId;
    }

    public HistoricActivityInstanceQueryDto sorting(List<HistoricActivityInstanceQueryDtoSortingInner> sorting) {
        this.sorting = sorting;
        return this;
    }

    public HistoricActivityInstanceQueryDto addSortingItem(HistoricActivityInstanceQueryDtoSortingInner sortingItem) {
        if (this.sorting == null) {
            this.sorting = new ArrayList<>();
        }
        this.sorting.add(sortingItem);
        return this;
    }

    /**
     * Apply sorting of the result
     * @return sorting
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SORTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<HistoricActivityInstanceQueryDtoSortingInner> getSorting() {
        return sorting;
    }

    @JsonProperty(JSON_PROPERTY_SORTING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSorting(List<HistoricActivityInstanceQueryDtoSortingInner> sorting) {
        this.sorting = sorting;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HistoricActivityInstanceQueryDto historicActivityInstanceQueryDto = (HistoricActivityInstanceQueryDto) o;
        return Objects.equals(this.activityInstanceId, historicActivityInstanceQueryDto.activityInstanceId) &&
            Objects.equals(this.processInstanceId, historicActivityInstanceQueryDto.processInstanceId) &&
            Objects.equals(this.processDefinitionId, historicActivityInstanceQueryDto.processDefinitionId) &&
            Objects.equals(this.executionId, historicActivityInstanceQueryDto.executionId) &&
            Objects.equals(this.activityId, historicActivityInstanceQueryDto.activityId) &&
            Objects.equals(this.activityName, historicActivityInstanceQueryDto.activityName) &&
            Objects.equals(this.activityType, historicActivityInstanceQueryDto.activityType) &&
            Objects.equals(this.taskAssignee, historicActivityInstanceQueryDto.taskAssignee) &&
            Objects.equals(this.finished, historicActivityInstanceQueryDto.finished) &&
            Objects.equals(this.unfinished, historicActivityInstanceQueryDto.unfinished) &&
            Objects.equals(this.canceled, historicActivityInstanceQueryDto.canceled) &&
            Objects.equals(this.completeScope, historicActivityInstanceQueryDto.completeScope) &&
            Objects.equals(this.startedBefore, historicActivityInstanceQueryDto.startedBefore) &&
            Objects.equals(this.startedAfter, historicActivityInstanceQueryDto.startedAfter) &&
            Objects.equals(this.finishedBefore, historicActivityInstanceQueryDto.finishedBefore) &&
            Objects.equals(this.finishedAfter, historicActivityInstanceQueryDto.finishedAfter) &&
            Objects.equals(this.tenantIdIn, historicActivityInstanceQueryDto.tenantIdIn) &&
            Objects.equals(this.withoutTenantId, historicActivityInstanceQueryDto.withoutTenantId) &&
            Objects.equals(this.sorting, historicActivityInstanceQueryDto.sorting);
    }

    @Override
    public int hashCode() {
        return Objects.hash(activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, sorting);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HistoricActivityInstanceQueryDto {\n");
        sb.append("    activityInstanceId: ").append(toIndentedString(activityInstanceId)).append("\n");
        sb.append("    processInstanceId: ").append(toIndentedString(processInstanceId)).append("\n");
        sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
        sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
        sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
        sb.append("    activityName: ").append(toIndentedString(activityName)).append("\n");
        sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
        sb.append("    taskAssignee: ").append(toIndentedString(taskAssignee)).append("\n");
        sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
        sb.append("    unfinished: ").append(toIndentedString(unfinished)).append("\n");
        sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
        sb.append("    completeScope: ").append(toIndentedString(completeScope)).append("\n");
        sb.append("    startedBefore: ").append(toIndentedString(startedBefore)).append("\n");
        sb.append("    startedAfter: ").append(toIndentedString(startedAfter)).append("\n");
        sb.append("    finishedBefore: ").append(toIndentedString(finishedBefore)).append("\n");
        sb.append("    finishedAfter: ").append(toIndentedString(finishedAfter)).append("\n");
        sb.append("    tenantIdIn: ").append(toIndentedString(tenantIdIn)).append("\n");
        sb.append("    withoutTenantId: ").append(toIndentedString(withoutTenantId)).append("\n");
        sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

