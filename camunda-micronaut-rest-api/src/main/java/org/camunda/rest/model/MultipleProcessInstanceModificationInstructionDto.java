/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * MultipleProcessInstanceModificationInstructionDto
 */
@JsonPropertyOrder({
  MultipleProcessInstanceModificationInstructionDto.JSON_PROPERTY_TYPE,
  MultipleProcessInstanceModificationInstructionDto.JSON_PROPERTY_ACTIVITY_ID,
  MultipleProcessInstanceModificationInstructionDto.JSON_PROPERTY_TRANSITION_ID,
  MultipleProcessInstanceModificationInstructionDto.JSON_PROPERTY_CANCEL_CURRENT_ACTIVE_ACTIVITY_INSTANCES
})
@JsonTypeName("MultipleProcessInstanceModificationInstructionDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class MultipleProcessInstanceModificationInstructionDto {
    /**
     * **Mandatory**. One of the following values: &#x60;cancel&#x60;, &#x60;startBeforeActivity&#x60;, &#x60;startAfterActivity&#x60;, &#x60;startTransition&#x60;.  * A cancel instruction requests cancellation of a single activity instance or all instances of one activity. * A startBeforeActivity instruction requests to enter a given activity. * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. * A startTransition instruction requests to execute a specific sequence flow.
     */
    public enum TypeEnum {
        CANCEL("cancel"),
        STARTBEFOREACTIVITY("startBeforeActivity"),
        STARTAFTERACTIVITY("startAfterActivity"),
        STARTTRANSITION("startTransition");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_TYPE = "type";
    private TypeEnum type;

    public static final String JSON_PROPERTY_ACTIVITY_ID = "activityId";
    private String activityId;

    public static final String JSON_PROPERTY_TRANSITION_ID = "transitionId";
    private String transitionId;

    public static final String JSON_PROPERTY_CANCEL_CURRENT_ACTIVE_ACTIVITY_INSTANCES = "cancelCurrentActiveActivityInstances";
    private Boolean cancelCurrentActiveActivityInstances;

    public MultipleProcessInstanceModificationInstructionDto(TypeEnum type) {
        this.type = type;
    }

    public MultipleProcessInstanceModificationInstructionDto type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * **Mandatory**. One of the following values: &#x60;cancel&#x60;, &#x60;startBeforeActivity&#x60;, &#x60;startAfterActivity&#x60;, &#x60;startTransition&#x60;.  * A cancel instruction requests cancellation of a single activity instance or all instances of one activity. * A startBeforeActivity instruction requests to enter a given activity. * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. * A startTransition instruction requests to execute a specific sequence flow.
     * @return type
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(TypeEnum type) {
        this.type = type;
    }

    public MultipleProcessInstanceModificationInstructionDto activityId(String activityId) {
        this.activityId = activityId;
        return this;
    }

    /**
     * Can be used with instructions of types &#x60;startTransition&#x60;. Specifies the sequence flow to start.
     * @return activityId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getActivityId() {
        return activityId;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    public MultipleProcessInstanceModificationInstructionDto transitionId(String transitionId) {
        this.transitionId = transitionId;
        return this;
    }

    /**
     * Can be used with instructions of types &#x60;startTransition&#x60;. Specifies the sequence flow to start.
     * @return transitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TRANSITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTransitionId() {
        return transitionId;
    }

    @JsonProperty(JSON_PROPERTY_TRANSITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTransitionId(String transitionId) {
        this.transitionId = transitionId;
    }

    public MultipleProcessInstanceModificationInstructionDto cancelCurrentActiveActivityInstances(Boolean cancelCurrentActiveActivityInstances) {
        this.cancelCurrentActiveActivityInstances = cancelCurrentActiveActivityInstances;
        return this;
    }

    /**
     * Can be used with instructions of type cancel. Prevents the deletion of new created activity instances.
     * @return cancelCurrentActiveActivityInstances
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CANCEL_CURRENT_ACTIVE_ACTIVITY_INSTANCES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCancelCurrentActiveActivityInstances() {
        return cancelCurrentActiveActivityInstances;
    }

    @JsonProperty(JSON_PROPERTY_CANCEL_CURRENT_ACTIVE_ACTIVITY_INSTANCES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCancelCurrentActiveActivityInstances(Boolean cancelCurrentActiveActivityInstances) {
        this.cancelCurrentActiveActivityInstances = cancelCurrentActiveActivityInstances;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultipleProcessInstanceModificationInstructionDto multipleProcessInstanceModificationInstructionDto = (MultipleProcessInstanceModificationInstructionDto) o;
        return Objects.equals(this.type, multipleProcessInstanceModificationInstructionDto.type) &&
            Objects.equals(this.activityId, multipleProcessInstanceModificationInstructionDto.activityId) &&
            Objects.equals(this.transitionId, multipleProcessInstanceModificationInstructionDto.transitionId) &&
            Objects.equals(this.cancelCurrentActiveActivityInstances, multipleProcessInstanceModificationInstructionDto.cancelCurrentActiveActivityInstances);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, activityId, transitionId, cancelCurrentActiveActivityInstances);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MultipleProcessInstanceModificationInstructionDto {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
        sb.append("    transitionId: ").append(toIndentedString(transitionId)).append("\n");
        sb.append("    cancelCurrentActiveActivityInstances: ").append(toIndentedString(cancelCurrentActiveActivityInstances)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

