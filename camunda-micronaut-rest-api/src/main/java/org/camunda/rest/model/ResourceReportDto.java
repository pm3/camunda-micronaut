/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ResourceReportDto
 */
@JsonPropertyOrder({
  ResourceReportDto.JSON_PROPERTY_ERRORS,
  ResourceReportDto.JSON_PROPERTY_WARNINGS
})
@JsonTypeName("ResourceReportDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class ResourceReportDto {
    public static final String JSON_PROPERTY_ERRORS = "errors";
    private List<ProblemDto> errors = null;

    public static final String JSON_PROPERTY_WARNINGS = "warnings";
    private List<ProblemDto> warnings = null;

    public ResourceReportDto() {
    }

    public ResourceReportDto errors(List<ProblemDto> errors) {
        this.errors = errors;
        return this;
    }

    public ResourceReportDto addErrorsItem(ProblemDto errorsItem) {
        if (this.errors == null) {
            this.errors = new ArrayList<>();
        }
        this.errors.add(errorsItem);
        return this;
    }

    /**
     * A list of errors occurred during parsing.
     * @return errors
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<ProblemDto> getErrors() {
        return errors;
    }

    @JsonProperty(JSON_PROPERTY_ERRORS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setErrors(List<ProblemDto> errors) {
        this.errors = errors;
    }

    public ResourceReportDto warnings(List<ProblemDto> warnings) {
        this.warnings = warnings;
        return this;
    }

    public ResourceReportDto addWarningsItem(ProblemDto warningsItem) {
        if (this.warnings == null) {
            this.warnings = new ArrayList<>();
        }
        this.warnings.add(warningsItem);
        return this;
    }

    /**
     * A list of warnings occurred during parsing.
     * @return warnings
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WARNINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<ProblemDto> getWarnings() {
        return warnings;
    }

    @JsonProperty(JSON_PROPERTY_WARNINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWarnings(List<ProblemDto> warnings) {
        this.warnings = warnings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResourceReportDto resourceReportDto = (ResourceReportDto) o;
        return Objects.equals(this.errors, resourceReportDto.errors) &&
            Objects.equals(this.warnings, resourceReportDto.warnings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(errors, warnings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ResourceReportDto {\n");
        sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
        sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

