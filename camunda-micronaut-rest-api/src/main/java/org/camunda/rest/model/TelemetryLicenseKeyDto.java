/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * TelemetryLicenseKeyDto
 */
@JsonPropertyOrder({
  TelemetryLicenseKeyDto.JSON_PROPERTY_CUSTOMER,
  TelemetryLicenseKeyDto.JSON_PROPERTY_TYPE,
  TelemetryLicenseKeyDto.JSON_PROPERTY_VALID_UNTIL,
  TelemetryLicenseKeyDto.JSON_PROPERTY_UNLIMITED,
  TelemetryLicenseKeyDto.JSON_PROPERTY_FEATURES,
  TelemetryLicenseKeyDto.JSON_PROPERTY_RAW
})
@JsonTypeName("TelemetryLicenseKeyDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class TelemetryLicenseKeyDto {
    public static final String JSON_PROPERTY_CUSTOMER = "customer";
    private String customer;

    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public static final String JSON_PROPERTY_VALID_UNTIL = "valid-until";
    private LocalDate validUntil;

    public static final String JSON_PROPERTY_UNLIMITED = "unlimited";
    private Boolean unlimited;

    public static final String JSON_PROPERTY_FEATURES = "features";
    private Map<String, String> features = null;

    public static final String JSON_PROPERTY_RAW = "raw";
    private String raw;

    public TelemetryLicenseKeyDto() {
    }

    public TelemetryLicenseKeyDto customer(String customer) {
        this.customer = customer;
        return this;
    }

    /**
     * The name of the customer the license was issued for.
     * @return customer
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CUSTOMER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCustomer() {
        return customer;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustomer(String customer) {
        this.customer = customer;
    }

    public TelemetryLicenseKeyDto type(String type) {
        this.type = type;
        return this;
    }

    /**
     * The license type.
     * @return type
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    public TelemetryLicenseKeyDto validUntil(LocalDate validUntil) {
        this.validUntil = validUntil;
        return this;
    }

    /**
     * The expiration date of the license.
     * @return validUntil
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VALID_UNTIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public LocalDate getValidUntil() {
        return validUntil;
    }

    @JsonProperty(JSON_PROPERTY_VALID_UNTIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public void setValidUntil(LocalDate validUntil) {
        this.validUntil = validUntil;
    }

    public TelemetryLicenseKeyDto unlimited(Boolean unlimited) {
        this.unlimited = unlimited;
        return this;
    }

    /**
     * Flag that indicates if the license is unlimited.
     * @return unlimited
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_UNLIMITED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUnlimited() {
        return unlimited;
    }

    @JsonProperty(JSON_PROPERTY_UNLIMITED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUnlimited(Boolean unlimited) {
        this.unlimited = unlimited;
    }

    public TelemetryLicenseKeyDto features(Map<String, String> features) {
        this.features = features;
        return this;
    }

    public TelemetryLicenseKeyDto putFeaturesItem(String key, String featuresItem) {
        if (this.features == null) {
            this.features = new HashMap<>();
        }
        this.features.put(key, featuresItem);
        return this;
  }

    /**
     * A map of features included in the license.
     * @return features
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FEATURES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, String> getFeatures() {
        return features;
    }

    @JsonProperty(JSON_PROPERTY_FEATURES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeatures(Map<String, String> features) {
        this.features = features;
    }

    public TelemetryLicenseKeyDto raw(String raw) {
        this.raw = raw;
        return this;
    }

    /**
     * The raw license information.
     * @return raw
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_RAW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRaw() {
        return raw;
    }

    @JsonProperty(JSON_PROPERTY_RAW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRaw(String raw) {
        this.raw = raw;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TelemetryLicenseKeyDto telemetryLicenseKeyDto = (TelemetryLicenseKeyDto) o;
        return Objects.equals(this.customer, telemetryLicenseKeyDto.customer) &&
            Objects.equals(this.type, telemetryLicenseKeyDto.type) &&
            Objects.equals(this.validUntil, telemetryLicenseKeyDto.validUntil) &&
            Objects.equals(this.unlimited, telemetryLicenseKeyDto.unlimited) &&
            Objects.equals(this.features, telemetryLicenseKeyDto.features) &&
            Objects.equals(this.raw, telemetryLicenseKeyDto.raw);
    }

    @Override
    public int hashCode() {
        return Objects.hash(customer, type, validUntil, unlimited, features, raw);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TelemetryLicenseKeyDto {\n");
        sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
        sb.append("    unlimited: ").append(toIndentedString(unlimited)).append("\n");
        sb.append("    features: ").append(toIndentedString(features)).append("\n");
        sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

