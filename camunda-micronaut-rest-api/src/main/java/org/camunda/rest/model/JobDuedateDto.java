/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * JobDuedateDto
 */
@JsonPropertyOrder({
  JobDuedateDto.JSON_PROPERTY_DUEDATE,
  JobDuedateDto.JSON_PROPERTY_CASCADE
})
@JsonTypeName("JobDuedateDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class JobDuedateDto {
    public static final String JSON_PROPERTY_DUEDATE = "duedate";
    private OffsetDateTime duedate;

    public static final String JSON_PROPERTY_CASCADE = "cascade";
    private Boolean cascade;

    public JobDuedateDto() {
    }

    public JobDuedateDto duedate(OffsetDateTime duedate) {
        this.duedate = duedate;
        return this;
    }

    /**
     * The date to set when the job has the next execution.
     * @return duedate
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DUEDATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDuedate() {
        return duedate;
    }

    @JsonProperty(JSON_PROPERTY_DUEDATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDuedate(OffsetDateTime duedate) {
        this.duedate = duedate;
    }

    public JobDuedateDto cascade(Boolean cascade) {
        this.cascade = cascade;
        return this;
    }

    /**
     * A boolean value to indicate if modifications to the due date should cascade to subsequent jobs. (e.g. Modify the due date of a timer by +15 minutes. This flag indicates if a +15 minutes should be applied to all subsequent timers.) This flag only affects timer jobs and only works if due date is not null. Default: &#x60;false&#x60;
     * @return cascade
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASCADE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCascade() {
        return cascade;
    }

    @JsonProperty(JSON_PROPERTY_CASCADE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCascade(Boolean cascade) {
        this.cascade = cascade;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobDuedateDto jobDuedateDto = (JobDuedateDto) o;
        return Objects.equals(this.duedate, jobDuedateDto.duedate) &&
            Objects.equals(this.cascade, jobDuedateDto.cascade);
    }

    @Override
    public int hashCode() {
        return Objects.hash(duedate, cascade);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobDuedateDto {\n");
        sb.append("    duedate: ").append(toIndentedString(duedate)).append("\n");
        sb.append("    cascade: ").append(toIndentedString(cascade)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

