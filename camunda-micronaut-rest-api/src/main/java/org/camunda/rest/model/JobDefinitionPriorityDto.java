/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * JobDefinitionPriorityDto
 */
@JsonPropertyOrder({
  JobDefinitionPriorityDto.JSON_PROPERTY_PRIORITY,
  JobDefinitionPriorityDto.JSON_PROPERTY_INCLUDE_JOBS
})
@JsonTypeName("JobDefinitionPriorityDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class JobDefinitionPriorityDto {
    public static final String JSON_PROPERTY_PRIORITY = "priority";
    private Long priority;

    public static final String JSON_PROPERTY_INCLUDE_JOBS = "includeJobs";
    private Boolean includeJobs;

    public JobDefinitionPriorityDto() {
    }

    public JobDefinitionPriorityDto priority(Long priority) {
        this.priority = priority;
        return this;
    }

    /**
     * The new execution priority number for jobs of the given definition. The definition&#39;s priority can be reset by using the value &#x60;null&#x60;. In that case, the job definition&#39;s priority no longer applies but a new job&#39;s priority is determined as specified in the process model.
     * @return priority
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PRIORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getPriority() {
        return priority;
    }

    @JsonProperty(JSON_PROPERTY_PRIORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPriority(Long priority) {
        this.priority = priority;
    }

    public JobDefinitionPriorityDto includeJobs(Boolean includeJobs) {
        this.includeJobs = includeJobs;
        return this;
    }

    /**
     * A boolean value indicating whether existing jobs of the given definition should receive the priority as well. Default value is &#x60;false&#x60;. Can only be &#x60;true&#x60; when the __priority__ parameter is not &#x60;null&#x60;.
     * @return includeJobs
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_INCLUDE_JOBS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIncludeJobs() {
        return includeJobs;
    }

    @JsonProperty(JSON_PROPERTY_INCLUDE_JOBS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIncludeJobs(Boolean includeJobs) {
        this.includeJobs = includeJobs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobDefinitionPriorityDto jobDefinitionPriorityDto = (JobDefinitionPriorityDto) o;
        return Objects.equals(this.priority, jobDefinitionPriorityDto.priority) &&
            Objects.equals(this.includeJobs, jobDefinitionPriorityDto.includeJobs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(priority, includeJobs);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobDefinitionPriorityDto {\n");
        sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
        sb.append("    includeJobs: ").append(toIndentedString(includeJobs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

