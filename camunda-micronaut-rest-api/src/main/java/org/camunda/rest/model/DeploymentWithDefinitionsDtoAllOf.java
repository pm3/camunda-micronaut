/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * DeploymentWithDefinitionsDtoAllOf
 */
@JsonPropertyOrder({
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS,
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS,
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS,
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS
})
@JsonTypeName("DeploymentWithDefinitionsDto_allOf")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class DeploymentWithDefinitionsDtoAllOf {
    public static final String JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS = "deployedProcessDefinitions";
    private Map<String, ProcessDefinitionDto> deployedProcessDefinitions = null;

    public static final String JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS = "deployedDecisionDefinitions";
    private Map<String, DecisionDefinitionDto> deployedDecisionDefinitions = null;

    public static final String JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS = "deployedDecisionRequirementsDefinitions";
    private Map<String, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions = null;

    public static final String JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS = "deployedCaseDefinitions";
    private Map<String, CaseDefinitionDto> deployedCaseDefinitions = null;

    public DeploymentWithDefinitionsDtoAllOf() {
    }

    public DeploymentWithDefinitionsDtoAllOf deployedProcessDefinitions(Map<String, ProcessDefinitionDto> deployedProcessDefinitions) {
        this.deployedProcessDefinitions = deployedProcessDefinitions;
        return this;
    }

    public DeploymentWithDefinitionsDtoAllOf putDeployedProcessDefinitionsItem(String key, ProcessDefinitionDto deployedProcessDefinitionsItem) {
        if (this.deployedProcessDefinitions == null) {
            this.deployedProcessDefinitions = new HashMap<>();
        }
        this.deployedProcessDefinitions.put(key, deployedProcessDefinitionsItem);
        return this;
  }

    /**
     * A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
     * @return deployedProcessDefinitions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, ProcessDefinitionDto> getDeployedProcessDefinitions() {
        return deployedProcessDefinitions;
    }

    @JsonProperty(JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeployedProcessDefinitions(Map<String, ProcessDefinitionDto> deployedProcessDefinitions) {
        this.deployedProcessDefinitions = deployedProcessDefinitions;
    }

    public DeploymentWithDefinitionsDtoAllOf deployedDecisionDefinitions(Map<String, DecisionDefinitionDto> deployedDecisionDefinitions) {
        this.deployedDecisionDefinitions = deployedDecisionDefinitions;
        return this;
    }

    public DeploymentWithDefinitionsDtoAllOf putDeployedDecisionDefinitionsItem(String key, DecisionDefinitionDto deployedDecisionDefinitionsItem) {
        if (this.deployedDecisionDefinitions == null) {
            this.deployedDecisionDefinitions = new HashMap<>();
        }
        this.deployedDecisionDefinitions.put(key, deployedDecisionDefinitionsItem);
        return this;
  }

    /**
     * A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
     * @return deployedDecisionDefinitions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, DecisionDefinitionDto> getDeployedDecisionDefinitions() {
        return deployedDecisionDefinitions;
    }

    @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeployedDecisionDefinitions(Map<String, DecisionDefinitionDto> deployedDecisionDefinitions) {
        this.deployedDecisionDefinitions = deployedDecisionDefinitions;
    }

    public DeploymentWithDefinitionsDtoAllOf deployedDecisionRequirementsDefinitions(Map<String, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions) {
        this.deployedDecisionRequirementsDefinitions = deployedDecisionRequirementsDefinitions;
        return this;
    }

    public DeploymentWithDefinitionsDtoAllOf putDeployedDecisionRequirementsDefinitionsItem(String key, DecisionRequirementsDefinitionDto deployedDecisionRequirementsDefinitionsItem) {
        if (this.deployedDecisionRequirementsDefinitions == null) {
            this.deployedDecisionRequirementsDefinitions = new HashMap<>();
        }
        this.deployedDecisionRequirementsDefinitions.put(key, deployedDecisionRequirementsDefinitionsItem);
        return this;
  }

    /**
     * A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
     * @return deployedDecisionRequirementsDefinitions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, DecisionRequirementsDefinitionDto> getDeployedDecisionRequirementsDefinitions() {
        return deployedDecisionRequirementsDefinitions;
    }

    @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeployedDecisionRequirementsDefinitions(Map<String, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions) {
        this.deployedDecisionRequirementsDefinitions = deployedDecisionRequirementsDefinitions;
    }

    public DeploymentWithDefinitionsDtoAllOf deployedCaseDefinitions(Map<String, CaseDefinitionDto> deployedCaseDefinitions) {
        this.deployedCaseDefinitions = deployedCaseDefinitions;
        return this;
    }

    public DeploymentWithDefinitionsDtoAllOf putDeployedCaseDefinitionsItem(String key, CaseDefinitionDto deployedCaseDefinitionsItem) {
        if (this.deployedCaseDefinitions == null) {
            this.deployedCaseDefinitions = new HashMap<>();
        }
        this.deployedCaseDefinitions.put(key, deployedCaseDefinitionsItem);
        return this;
  }

    /**
     * A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
     * @return deployedCaseDefinitions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, CaseDefinitionDto> getDeployedCaseDefinitions() {
        return deployedCaseDefinitions;
    }

    @JsonProperty(JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeployedCaseDefinitions(Map<String, CaseDefinitionDto> deployedCaseDefinitions) {
        this.deployedCaseDefinitions = deployedCaseDefinitions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeploymentWithDefinitionsDtoAllOf deploymentWithDefinitionsDtoAllOf = (DeploymentWithDefinitionsDtoAllOf) o;
        return Objects.equals(this.deployedProcessDefinitions, deploymentWithDefinitionsDtoAllOf.deployedProcessDefinitions) &&
            Objects.equals(this.deployedDecisionDefinitions, deploymentWithDefinitionsDtoAllOf.deployedDecisionDefinitions) &&
            Objects.equals(this.deployedDecisionRequirementsDefinitions, deploymentWithDefinitionsDtoAllOf.deployedDecisionRequirementsDefinitions) &&
            Objects.equals(this.deployedCaseDefinitions, deploymentWithDefinitionsDtoAllOf.deployedCaseDefinitions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(deployedProcessDefinitions, deployedDecisionDefinitions, deployedDecisionRequirementsDefinitions, deployedCaseDefinitions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DeploymentWithDefinitionsDtoAllOf {\n");
        sb.append("    deployedProcessDefinitions: ").append(toIndentedString(deployedProcessDefinitions)).append("\n");
        sb.append("    deployedDecisionDefinitions: ").append(toIndentedString(deployedDecisionDefinitions)).append("\n");
        sb.append("    deployedDecisionRequirementsDefinitions: ").append(toIndentedString(deployedDecisionRequirementsDefinitions)).append("\n");
        sb.append("    deployedCaseDefinitions: ").append(toIndentedString(deployedCaseDefinitions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

