/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * CreateIncidentDto
 */
@JsonPropertyOrder({
  CreateIncidentDto.JSON_PROPERTY_INCIDENT_TYPE,
  CreateIncidentDto.JSON_PROPERTY_CONFIGURATION,
  CreateIncidentDto.JSON_PROPERTY_MESSAGE
})
@JsonTypeName("CreateIncidentDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class CreateIncidentDto {
    public static final String JSON_PROPERTY_INCIDENT_TYPE = "incidentType";
    private String incidentType;

    public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
    private String _configuration;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public CreateIncidentDto() {
    }

    public CreateIncidentDto incidentType(String incidentType) {
        this.incidentType = incidentType;
        return this;
    }

    /**
     * A type of the new incident.
     * @return incidentType
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_INCIDENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getIncidentType() {
        return incidentType;
    }

    @JsonProperty(JSON_PROPERTY_INCIDENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIncidentType(String incidentType) {
        this.incidentType = incidentType;
    }

    public CreateIncidentDto _configuration(String _configuration) {
        this._configuration = _configuration;
        return this;
    }

    /**
     * A configuration for the new incident.
     * @return _configuration
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CONFIGURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getConfiguration() {
        return _configuration;
    }

    @JsonProperty(JSON_PROPERTY_CONFIGURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConfiguration(String _configuration) {
        this._configuration = _configuration;
    }

    public CreateIncidentDto message(String message) {
        this.message = message;
        return this;
    }

    /**
     * A message for the new incident.
     * @return message
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessage(String message) {
        this.message = message;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateIncidentDto createIncidentDto = (CreateIncidentDto) o;
        return Objects.equals(this.incidentType, createIncidentDto.incidentType) &&
            Objects.equals(this._configuration, createIncidentDto._configuration) &&
            Objects.equals(this.message, createIncidentDto.message);
    }

    @Override
    public int hashCode() {
        return Objects.hash(incidentType, _configuration, message);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateIncidentDto {\n");
        sb.append("    incidentType: ").append(toIndentedString(incidentType)).append("\n");
        sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

