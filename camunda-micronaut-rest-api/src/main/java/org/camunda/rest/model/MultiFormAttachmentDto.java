/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.io.File;
import java.util.Objects;

/**
 * MultiFormAttachmentDto
 */
@JsonPropertyOrder({
  MultiFormAttachmentDto.JSON_PROPERTY_ATTACHMENT_NAME,
  MultiFormAttachmentDto.JSON_PROPERTY_ATTACHMENT_DESCRIPTION,
  MultiFormAttachmentDto.JSON_PROPERTY_ATTACHMENT_TYPE,
  MultiFormAttachmentDto.JSON_PROPERTY_URL,
  MultiFormAttachmentDto.JSON_PROPERTY_CONTENT
})
@JsonTypeName("MultiFormAttachmentDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class MultiFormAttachmentDto {
    public static final String JSON_PROPERTY_ATTACHMENT_NAME = "attachment-name";
    private String attachmentName;

    public static final String JSON_PROPERTY_ATTACHMENT_DESCRIPTION = "attachment-description";
    private String attachmentDescription;

    public static final String JSON_PROPERTY_ATTACHMENT_TYPE = "attachment-type";
    private String attachmentType;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_CONTENT = "content";
    private File content;

    public MultiFormAttachmentDto() {
    }

    public MultiFormAttachmentDto attachmentName(String attachmentName) {
        this.attachmentName = attachmentName;
        return this;
    }

    /**
     * The name of the attachment.
     * @return attachmentName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ATTACHMENT_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAttachmentName() {
        return attachmentName;
    }

    @JsonProperty(JSON_PROPERTY_ATTACHMENT_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAttachmentName(String attachmentName) {
        this.attachmentName = attachmentName;
    }

    public MultiFormAttachmentDto attachmentDescription(String attachmentDescription) {
        this.attachmentDescription = attachmentDescription;
        return this;
    }

    /**
     * The description of the attachment.
     * @return attachmentDescription
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ATTACHMENT_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAttachmentDescription() {
        return attachmentDescription;
    }

    @JsonProperty(JSON_PROPERTY_ATTACHMENT_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAttachmentDescription(String attachmentDescription) {
        this.attachmentDescription = attachmentDescription;
    }

    public MultiFormAttachmentDto attachmentType(String attachmentType) {
        this.attachmentType = attachmentType;
        return this;
    }

    /**
     * The type of the attachment.
     * @return attachmentType
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ATTACHMENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAttachmentType() {
        return attachmentType;
    }

    @JsonProperty(JSON_PROPERTY_ATTACHMENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAttachmentType(String attachmentType) {
        this.attachmentType = attachmentType;
    }

    public MultiFormAttachmentDto url(String url) {
        this.url = url;
        return this;
    }

    /**
     * The url to the remote content of the attachment.
     * @return url
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(String url) {
        this.url = url;
    }

    public MultiFormAttachmentDto content(File content) {
        this.content = content;
        return this;
    }

    /**
     * The content of the attachment.
     * @return content
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CONTENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public File getContent() {
        return content;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setContent(File content) {
        this.content = content;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultiFormAttachmentDto multiFormAttachmentDto = (MultiFormAttachmentDto) o;
        return Objects.equals(this.attachmentName, multiFormAttachmentDto.attachmentName) &&
            Objects.equals(this.attachmentDescription, multiFormAttachmentDto.attachmentDescription) &&
            Objects.equals(this.attachmentType, multiFormAttachmentDto.attachmentType) &&
            Objects.equals(this.url, multiFormAttachmentDto.url) &&
            Objects.equals(this.content, multiFormAttachmentDto.content);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attachmentName, attachmentDescription, attachmentType, url, content);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MultiFormAttachmentDto {\n");
        sb.append("    attachmentName: ").append(toIndentedString(attachmentName)).append("\n");
        sb.append("    attachmentDescription: ").append(toIndentedString(attachmentDescription)).append("\n");
        sb.append("    attachmentType: ").append(toIndentedString(attachmentType)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    content: ").append(toIndentedString(content)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

