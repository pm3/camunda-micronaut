/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * JobDefinitionDto
 */
@JsonPropertyOrder({
  JobDefinitionDto.JSON_PROPERTY_ID,
  JobDefinitionDto.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  JobDefinitionDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY,
  JobDefinitionDto.JSON_PROPERTY_ACTIVITY_ID,
  JobDefinitionDto.JSON_PROPERTY_JOB_TYPE,
  JobDefinitionDto.JSON_PROPERTY_JOB_CONFIGURATION,
  JobDefinitionDto.JSON_PROPERTY_OVERRIDING_JOB_PRIORITY,
  JobDefinitionDto.JSON_PROPERTY_SUSPENDED,
  JobDefinitionDto.JSON_PROPERTY_TENANT_ID,
  JobDefinitionDto.JSON_PROPERTY_DEPLOYMENT_ID
})
@JsonTypeName("JobDefinitionDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class JobDefinitionDto {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
    private String processDefinitionId;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY = "processDefinitionKey";
    private String processDefinitionKey;

    public static final String JSON_PROPERTY_ACTIVITY_ID = "activityId";
    private String activityId;

    public static final String JSON_PROPERTY_JOB_TYPE = "jobType";
    private String jobType;

    public static final String JSON_PROPERTY_JOB_CONFIGURATION = "jobConfiguration";
    private String jobConfiguration;

    public static final String JSON_PROPERTY_OVERRIDING_JOB_PRIORITY = "overridingJobPriority";
    private Long overridingJobPriority;

    public static final String JSON_PROPERTY_SUSPENDED = "suspended";
    private Boolean suspended;

    public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
    private String tenantId;

    public static final String JSON_PROPERTY_DEPLOYMENT_ID = "deploymentId";
    private String deploymentId;

    public JobDefinitionDto() {
    }

    public JobDefinitionDto id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The id of the job definition.
     * @return id
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public JobDefinitionDto processDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
        return this;
    }

    /**
     * The id of the process definition this job definition is associated with.
     * @return processDefinitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionId() {
        return processDefinitionId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
    }

    public JobDefinitionDto processDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
        return this;
    }

    /**
     * The key of the process definition this job definition is associated with.
     * @return processDefinitionKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionKey() {
        return processDefinitionKey;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
    }

    public JobDefinitionDto activityId(String activityId) {
        this.activityId = activityId;
        return this;
    }

    /**
     * The id of the activity this job definition is associated with.
     * @return activityId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getActivityId() {
        return activityId;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    public JobDefinitionDto jobType(String jobType) {
        this.jobType = jobType;
        return this;
    }

    /**
     * The type of the job which is running for this job definition. See the [User Guide](https://docs.camunda.org/manual/7.18/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
     * @return jobType
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_JOB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getJobType() {
        return jobType;
    }

    @JsonProperty(JSON_PROPERTY_JOB_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setJobType(String jobType) {
        this.jobType = jobType;
    }

    public JobDefinitionDto jobConfiguration(String jobConfiguration) {
        this.jobConfiguration = jobConfiguration;
        return this;
    }

    /**
     * The configuration of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer configuration.
     * @return jobConfiguration
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_JOB_CONFIGURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getJobConfiguration() {
        return jobConfiguration;
    }

    @JsonProperty(JSON_PROPERTY_JOB_CONFIGURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setJobConfiguration(String jobConfiguration) {
        this.jobConfiguration = jobConfiguration;
    }

    public JobDefinitionDto overridingJobPriority(Long overridingJobPriority) {
        this.overridingJobPriority = overridingJobPriority;
        return this;
    }

    /**
     * The execution priority defined for jobs that are created based on this definition. May be &#x60;null&#x60; when the priority has not been overridden on the job definition level.
     * @return overridingJobPriority
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_OVERRIDING_JOB_PRIORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getOverridingJobPriority() {
        return overridingJobPriority;
    }

    @JsonProperty(JSON_PROPERTY_OVERRIDING_JOB_PRIORITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOverridingJobPriority(Long overridingJobPriority) {
        this.overridingJobPriority = overridingJobPriority;
    }

    public JobDefinitionDto suspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }

    /**
     * Indicates whether this job definition is suspended or not.
     * @return suspended
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SUSPENDED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSuspended() {
        return suspended;
    }

    @JsonProperty(JSON_PROPERTY_SUSPENDED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSuspended(Boolean suspended) {
        this.suspended = suspended;
    }

    public JobDefinitionDto tenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * The id of the tenant this job definition is associated with.
     * @return tenantId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTenantId() {
        return tenantId;
    }

    @JsonProperty(JSON_PROPERTY_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public JobDefinitionDto deploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
        return this;
    }

    /**
     * The id of the deployment this job definition is related to. In a deployment-aware setup, this leads to all jobs of the same definition being executed on the same node.
     * @return deploymentId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DEPLOYMENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDeploymentId() {
        return deploymentId;
    }

    @JsonProperty(JSON_PROPERTY_DEPLOYMENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobDefinitionDto jobDefinitionDto = (JobDefinitionDto) o;
        return Objects.equals(this.id, jobDefinitionDto.id) &&
            Objects.equals(this.processDefinitionId, jobDefinitionDto.processDefinitionId) &&
            Objects.equals(this.processDefinitionKey, jobDefinitionDto.processDefinitionKey) &&
            Objects.equals(this.activityId, jobDefinitionDto.activityId) &&
            Objects.equals(this.jobType, jobDefinitionDto.jobType) &&
            Objects.equals(this.jobConfiguration, jobDefinitionDto.jobConfiguration) &&
            Objects.equals(this.overridingJobPriority, jobDefinitionDto.overridingJobPriority) &&
            Objects.equals(this.suspended, jobDefinitionDto.suspended) &&
            Objects.equals(this.tenantId, jobDefinitionDto.tenantId) &&
            Objects.equals(this.deploymentId, jobDefinitionDto.deploymentId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, processDefinitionId, processDefinitionKey, activityId, jobType, jobConfiguration, overridingJobPriority, suspended, tenantId, deploymentId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobDefinitionDto {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
        sb.append("    processDefinitionKey: ").append(toIndentedString(processDefinitionKey)).append("\n");
        sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
        sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
        sb.append("    jobConfiguration: ").append(toIndentedString(jobConfiguration)).append("\n");
        sb.append("    overridingJobPriority: ").append(toIndentedString(overridingJobPriority)).append("\n");
        sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
        sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
        sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

