/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * HistoricTaskInstanceReportResultDto
 */
@JsonPropertyOrder({
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_TASK_NAME,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_COUNT,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_PROCESS_DEFINITION_NAME,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_PERIOD,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_PERIOD_UNIT,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_MINIMUM,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_MAXIMUM,
  HistoricTaskInstanceReportResultDto.JSON_PROPERTY_AVERAGE
})
@JsonTypeName("HistoricTaskInstanceReportResultDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class HistoricTaskInstanceReportResultDto {
    public static final String JSON_PROPERTY_TASK_NAME = "taskName";
    private String taskName;

    public static final String JSON_PROPERTY_COUNT = "count";
    private Long count;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY = "processDefinitionKey";
    private String processDefinitionKey;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
    private String processDefinitionId;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_NAME = "processDefinitionName";
    private String processDefinitionName;

    public static final String JSON_PROPERTY_PERIOD = "period";
    private Integer period;

    /**
     * The unit of the given period. Possible values are &#x60;MONTH&#x60; and &#x60;QUARTER&#x60;.  **Note:** This property is only set for a duration report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;duration&#x60;.
     */
    public enum PeriodUnitEnum {
        MONTH("MONTH"),
        QUARTER("QUARTER");

        private String value;

        PeriodUnitEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static PeriodUnitEnum fromValue(String value) {
            for (PeriodUnitEnum b : PeriodUnitEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }
    }
    public static final String JSON_PROPERTY_PERIOD_UNIT = "periodUnit";
    private PeriodUnitEnum periodUnit;

    public static final String JSON_PROPERTY_MINIMUM = "minimum";
    private Long minimum;

    public static final String JSON_PROPERTY_MAXIMUM = "maximum";
    private Long maximum;

    public static final String JSON_PROPERTY_AVERAGE = "average";
    private Long average;

    public HistoricTaskInstanceReportResultDto() {
    }

    public HistoricTaskInstanceReportResultDto taskName(String taskName) {
        this.taskName = taskName;
        return this;
    }

    /**
     * The name of the task. It is only available when the &#x60;groupBy&#x60; parameter is set to &#x60;taskName&#x60;. Else the value is &#x60;null&#x60;.  **Note:** This property is only set for a historic task report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;count&#x60;.
     * @return taskName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TASK_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTaskName() {
        return taskName;
    }

    @JsonProperty(JSON_PROPERTY_TASK_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    public HistoricTaskInstanceReportResultDto count(Long count) {
        this.count = count;
        return this;
    }

    /**
     * The number of tasks which have the given definition.  **Note:** This property is only set for a historic task report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;count&#x60;.
     * @return count
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getCount() {
        return count;
    }

    @JsonProperty(JSON_PROPERTY_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCount(Long count) {
        this.count = count;
    }

    public HistoricTaskInstanceReportResultDto processDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
        return this;
    }

    /**
     * The key of the process definition.  **Note:** This property is only set for a historic task report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;count&#x60;.
     * @return processDefinitionKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionKey() {
        return processDefinitionKey;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
    }

    public HistoricTaskInstanceReportResultDto processDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
        return this;
    }

    /**
     * The id of the process definition.  **Note:** This property is only set for a historic task report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;count&#x60;.
     * @return processDefinitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionId() {
        return processDefinitionId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
    }

    public HistoricTaskInstanceReportResultDto processDefinitionName(String processDefinitionName) {
        this.processDefinitionName = processDefinitionName;
        return this;
    }

    /**
     * The name of the process definition.  **Note:** This property is only set for a historic task report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;count&#x60;.
     * @return processDefinitionName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionName() {
        return processDefinitionName;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionName(String processDefinitionName) {
        this.processDefinitionName = processDefinitionName;
    }

    public HistoricTaskInstanceReportResultDto period(Integer period) {
        this.period = period;
        return this;
    }

    /**
     * Specifies a span of time within a year. **Note:** The period must be interpreted in conjunction with the returned &#x60;periodUnit&#x60;.  **Note:** This property is only set for a duration report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;duration&#x60;.
     * @return period
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PERIOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getPeriod() {
        return period;
    }

    @JsonProperty(JSON_PROPERTY_PERIOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPeriod(Integer period) {
        this.period = period;
    }

    public HistoricTaskInstanceReportResultDto periodUnit(PeriodUnitEnum periodUnit) {
        this.periodUnit = periodUnit;
        return this;
    }

    /**
     * The unit of the given period. Possible values are &#x60;MONTH&#x60; and &#x60;QUARTER&#x60;.  **Note:** This property is only set for a duration report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;duration&#x60;.
     * @return periodUnit
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PERIOD_UNIT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PeriodUnitEnum getPeriodUnit() {
        return periodUnit;
    }

    @JsonProperty(JSON_PROPERTY_PERIOD_UNIT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPeriodUnit(PeriodUnitEnum periodUnit) {
        this.periodUnit = periodUnit;
    }

    public HistoricTaskInstanceReportResultDto minimum(Long minimum) {
        this.minimum = minimum;
        return this;
    }

    /**
     * The smallest duration in milliseconds of all completed process instances which were started in the given period.  **Note:** This property is only set for a duration report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;duration&#x60;.
     * @return minimum
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MINIMUM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getMinimum() {
        return minimum;
    }

    @JsonProperty(JSON_PROPERTY_MINIMUM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMinimum(Long minimum) {
        this.minimum = minimum;
    }

    public HistoricTaskInstanceReportResultDto maximum(Long maximum) {
        this.maximum = maximum;
        return this;
    }

    /**
     * The greatest duration in milliseconds of all completed process instances which were started in the given period.  **Note:** This property is only set for a duration report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;duration&#x60;.
     * @return maximum
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MAXIMUM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getMaximum() {
        return maximum;
    }

    @JsonProperty(JSON_PROPERTY_MAXIMUM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMaximum(Long maximum) {
        this.maximum = maximum;
    }

    public HistoricTaskInstanceReportResultDto average(Long average) {
        this.average = average;
        return this;
    }

    /**
     * The average duration in milliseconds of all completed process instances which were started in the given period.  **Note:** This property is only set for a duration report object. In these cases, the value of the &#x60;reportType&#x60; query parameter is &#x60;duration&#x60;.
     * @return average
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_AVERAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getAverage() {
        return average;
    }

    @JsonProperty(JSON_PROPERTY_AVERAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAverage(Long average) {
        this.average = average;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HistoricTaskInstanceReportResultDto historicTaskInstanceReportResultDto = (HistoricTaskInstanceReportResultDto) o;
        return Objects.equals(this.taskName, historicTaskInstanceReportResultDto.taskName) &&
            Objects.equals(this.count, historicTaskInstanceReportResultDto.count) &&
            Objects.equals(this.processDefinitionKey, historicTaskInstanceReportResultDto.processDefinitionKey) &&
            Objects.equals(this.processDefinitionId, historicTaskInstanceReportResultDto.processDefinitionId) &&
            Objects.equals(this.processDefinitionName, historicTaskInstanceReportResultDto.processDefinitionName) &&
            Objects.equals(this.period, historicTaskInstanceReportResultDto.period) &&
            Objects.equals(this.periodUnit, historicTaskInstanceReportResultDto.periodUnit) &&
            Objects.equals(this.minimum, historicTaskInstanceReportResultDto.minimum) &&
            Objects.equals(this.maximum, historicTaskInstanceReportResultDto.maximum) &&
            Objects.equals(this.average, historicTaskInstanceReportResultDto.average);
    }

    @Override
    public int hashCode() {
        return Objects.hash(taskName, count, processDefinitionKey, processDefinitionId, processDefinitionName, period, periodUnit, minimum, maximum, average);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HistoricTaskInstanceReportResultDto {\n");
        sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("    processDefinitionKey: ").append(toIndentedString(processDefinitionKey)).append("\n");
        sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
        sb.append("    processDefinitionName: ").append(toIndentedString(processDefinitionName)).append("\n");
        sb.append("    period: ").append(toIndentedString(period)).append("\n");
        sb.append("    periodUnit: ").append(toIndentedString(periodUnit)).append("\n");
        sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
        sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
        sb.append("    average: ").append(toIndentedString(average)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

