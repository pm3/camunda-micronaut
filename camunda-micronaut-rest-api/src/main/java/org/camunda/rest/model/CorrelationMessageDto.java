/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * CorrelationMessageDto
 */
@JsonPropertyOrder({
  CorrelationMessageDto.JSON_PROPERTY_MESSAGE_NAME,
  CorrelationMessageDto.JSON_PROPERTY_BUSINESS_KEY,
  CorrelationMessageDto.JSON_PROPERTY_TENANT_ID,
  CorrelationMessageDto.JSON_PROPERTY_WITHOUT_TENANT_ID,
  CorrelationMessageDto.JSON_PROPERTY_PROCESS_INSTANCE_ID,
  CorrelationMessageDto.JSON_PROPERTY_CORRELATION_KEYS,
  CorrelationMessageDto.JSON_PROPERTY_LOCAL_CORRELATION_KEYS,
  CorrelationMessageDto.JSON_PROPERTY_PROCESS_VARIABLES,
  CorrelationMessageDto.JSON_PROPERTY_PROCESS_VARIABLES_LOCAL,
  CorrelationMessageDto.JSON_PROPERTY_ALL,
  CorrelationMessageDto.JSON_PROPERTY_RESULT_ENABLED,
  CorrelationMessageDto.JSON_PROPERTY_VARIABLES_IN_RESULT_ENABLED
})
@JsonTypeName("CorrelationMessageDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class CorrelationMessageDto {
    public static final String JSON_PROPERTY_MESSAGE_NAME = "messageName";
    private String messageName;

    public static final String JSON_PROPERTY_BUSINESS_KEY = "businessKey";
    private String businessKey;

    public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
    private String tenantId;

    public static final String JSON_PROPERTY_WITHOUT_TENANT_ID = "withoutTenantId";
    private Boolean withoutTenantId = false;

    public static final String JSON_PROPERTY_PROCESS_INSTANCE_ID = "processInstanceId";
    private String processInstanceId;

    public static final String JSON_PROPERTY_CORRELATION_KEYS = "correlationKeys";
    private Map<String, VariableValueDto> correlationKeys = null;

    public static final String JSON_PROPERTY_LOCAL_CORRELATION_KEYS = "localCorrelationKeys";
    private Map<String, VariableValueDto> localCorrelationKeys = null;

    public static final String JSON_PROPERTY_PROCESS_VARIABLES = "processVariables";
    private Map<String, VariableValueDto> processVariables = null;

    public static final String JSON_PROPERTY_PROCESS_VARIABLES_LOCAL = "processVariablesLocal";
    private Map<String, VariableValueDto> processVariablesLocal = null;

    public static final String JSON_PROPERTY_ALL = "all";
    private Boolean all = false;

    public static final String JSON_PROPERTY_RESULT_ENABLED = "resultEnabled";
    private Boolean resultEnabled = false;

    public static final String JSON_PROPERTY_VARIABLES_IN_RESULT_ENABLED = "variablesInResultEnabled";
    private Boolean variablesInResultEnabled = false;

    public CorrelationMessageDto() {
    }

    public CorrelationMessageDto messageName(String messageName) {
        this.messageName = messageName;
        return this;
    }

    /**
     * The name of the message to deliver.
     * @return messageName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessageName() {
        return messageName;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessageName(String messageName) {
        this.messageName = messageName;
    }

    public CorrelationMessageDto businessKey(String businessKey) {
        this.businessKey = businessKey;
        return this;
    }

    /**
     * Used for correlation of process instances that wait for incoming messages. Will only correlate to executions that belong to a process instance with the provided business key.
     * @return businessKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_BUSINESS_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBusinessKey() {
        return businessKey;
    }

    @JsonProperty(JSON_PROPERTY_BUSINESS_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBusinessKey(String businessKey) {
        this.businessKey = businessKey;
    }

    public CorrelationMessageDto tenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Used to correlate the message for a tenant with the given id. Will only correlate to executions and process definitions which belong to the tenant. Must not be supplied in conjunction with a &#x60;withoutTenantId&#x60;.
     * @return tenantId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTenantId() {
        return tenantId;
    }

    @JsonProperty(JSON_PROPERTY_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public CorrelationMessageDto withoutTenantId(Boolean withoutTenantId) {
        this.withoutTenantId = withoutTenantId;
        return this;
    }

    /**
     * A Boolean value that indicates whether the message should only be correlated to executions and process definitions which belong to no tenant or not. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. Must not be supplied in conjunction with a &#x60;tenantId&#x60;.
     * @return withoutTenantId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getWithoutTenantId() {
        return withoutTenantId;
    }

    @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithoutTenantId(Boolean withoutTenantId) {
        this.withoutTenantId = withoutTenantId;
    }

    public CorrelationMessageDto processInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
        return this;
    }

    /**
     * Used to correlate the message to the process instance with the given id.
     * @return processInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessInstanceId() {
        return processInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public CorrelationMessageDto correlationKeys(Map<String, VariableValueDto> correlationKeys) {
        this.correlationKeys = correlationKeys;
        return this;
    }

    public CorrelationMessageDto putCorrelationKeysItem(String key, VariableValueDto correlationKeysItem) {
        if (this.correlationKeys == null) {
            this.correlationKeys = new HashMap<>();
        }
        this.correlationKeys.put(key, correlationKeysItem);
        return this;
  }

    /**
     * Used for correlation of process instances that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against process instance variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
     * @return correlationKeys
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CORRELATION_KEYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, VariableValueDto> getCorrelationKeys() {
        return correlationKeys;
    }

    @JsonProperty(JSON_PROPERTY_CORRELATION_KEYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCorrelationKeys(Map<String, VariableValueDto> correlationKeys) {
        this.correlationKeys = correlationKeys;
    }

    public CorrelationMessageDto localCorrelationKeys(Map<String, VariableValueDto> localCorrelationKeys) {
        this.localCorrelationKeys = localCorrelationKeys;
        return this;
    }

    public CorrelationMessageDto putLocalCorrelationKeysItem(String key, VariableValueDto localCorrelationKeysItem) {
        if (this.localCorrelationKeys == null) {
            this.localCorrelationKeys = new HashMap<>();
        }
        this.localCorrelationKeys.put(key, localCorrelationKeysItem);
        return this;
  }

    /**
     * Local variables used for correlation of executions (process instances) that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against local variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
     * @return localCorrelationKeys
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_LOCAL_CORRELATION_KEYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, VariableValueDto> getLocalCorrelationKeys() {
        return localCorrelationKeys;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL_CORRELATION_KEYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLocalCorrelationKeys(Map<String, VariableValueDto> localCorrelationKeys) {
        this.localCorrelationKeys = localCorrelationKeys;
    }

    public CorrelationMessageDto processVariables(Map<String, VariableValueDto> processVariables) {
        this.processVariables = processVariables;
        return this;
    }

    public CorrelationMessageDto putProcessVariablesItem(String key, VariableValueDto processVariablesItem) {
        if (this.processVariables == null) {
            this.processVariables = new HashMap<>();
        }
        this.processVariables.put(key, processVariablesItem);
        return this;
  }

    /**
     * A map of variables that is injected into the triggered execution or process instance after the message has been delivered. Each key is a variable name and each value a JSON variable value object with the following properties.
     * @return processVariables
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, VariableValueDto> getProcessVariables() {
        return processVariables;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessVariables(Map<String, VariableValueDto> processVariables) {
        this.processVariables = processVariables;
    }

    public CorrelationMessageDto processVariablesLocal(Map<String, VariableValueDto> processVariablesLocal) {
        this.processVariablesLocal = processVariablesLocal;
        return this;
    }

    public CorrelationMessageDto putProcessVariablesLocalItem(String key, VariableValueDto processVariablesLocalItem) {
        if (this.processVariablesLocal == null) {
            this.processVariablesLocal = new HashMap<>();
        }
        this.processVariablesLocal.put(key, processVariablesLocalItem);
        return this;
  }

    /**
     * A map of local variables that is injected into the triggered execution or process instance after the message has been delivered. Each key is a variable name and each value a JSON variable value object with the following properties.
     * @return processVariablesLocal
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_VARIABLES_LOCAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, VariableValueDto> getProcessVariablesLocal() {
        return processVariablesLocal;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_VARIABLES_LOCAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessVariablesLocal(Map<String, VariableValueDto> processVariablesLocal) {
        this.processVariablesLocal = processVariablesLocal;
    }

    public CorrelationMessageDto all(Boolean all) {
        this.all = all;
        return this;
    }

    /**
     * A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities. If the value is set to &#x60;false&#x60;, the message will be correlated to exactly one entity (execution or process definition). If the value is set to &#x60;true&#x60;, the message will be correlated to multiple executions and a process definition that can be instantiated by this message in one go.
     * @return all
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ALL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getAll() {
        return all;
    }

    @JsonProperty(JSON_PROPERTY_ALL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAll(Boolean all) {
        this.all = all;
    }

    public CorrelationMessageDto resultEnabled(Boolean resultEnabled) {
        this.resultEnabled = resultEnabled;
        return this;
    }

    /**
     * A Boolean value that indicates whether the result of the correlation should be returned or not. If this property is set to &#x60;true&#x60;, there will be returned a list of message correlation result objects. Depending on the all property, there will be either one ore more returned results in the list.  The default value is &#x60;false&#x60;, which means no result will be returned.
     * @return resultEnabled
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_RESULT_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getResultEnabled() {
        return resultEnabled;
    }

    @JsonProperty(JSON_PROPERTY_RESULT_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResultEnabled(Boolean resultEnabled) {
        this.resultEnabled = resultEnabled;
    }

    public CorrelationMessageDto variablesInResultEnabled(Boolean variablesInResultEnabled) {
        this.variablesInResultEnabled = variablesInResultEnabled;
        return this;
    }

    /**
     * A Boolean value that indicates whether the result of the correlation should contain process variables or not. The parameter resultEnabled should be set to &#x60;true&#x60; in order to use this it.  The default value is &#x60;false&#x60;, which means the variables will not be returned.
     * @return variablesInResultEnabled
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VARIABLES_IN_RESULT_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getVariablesInResultEnabled() {
        return variablesInResultEnabled;
    }

    @JsonProperty(JSON_PROPERTY_VARIABLES_IN_RESULT_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVariablesInResultEnabled(Boolean variablesInResultEnabled) {
        this.variablesInResultEnabled = variablesInResultEnabled;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorrelationMessageDto correlationMessageDto = (CorrelationMessageDto) o;
        return Objects.equals(this.messageName, correlationMessageDto.messageName) &&
            Objects.equals(this.businessKey, correlationMessageDto.businessKey) &&
            Objects.equals(this.tenantId, correlationMessageDto.tenantId) &&
            Objects.equals(this.withoutTenantId, correlationMessageDto.withoutTenantId) &&
            Objects.equals(this.processInstanceId, correlationMessageDto.processInstanceId) &&
            Objects.equals(this.correlationKeys, correlationMessageDto.correlationKeys) &&
            Objects.equals(this.localCorrelationKeys, correlationMessageDto.localCorrelationKeys) &&
            Objects.equals(this.processVariables, correlationMessageDto.processVariables) &&
            Objects.equals(this.processVariablesLocal, correlationMessageDto.processVariablesLocal) &&
            Objects.equals(this.all, correlationMessageDto.all) &&
            Objects.equals(this.resultEnabled, correlationMessageDto.resultEnabled) &&
            Objects.equals(this.variablesInResultEnabled, correlationMessageDto.variablesInResultEnabled);
    }

    @Override
    public int hashCode() {
        return Objects.hash(messageName, businessKey, tenantId, withoutTenantId, processInstanceId, correlationKeys, localCorrelationKeys, processVariables, processVariablesLocal, all, resultEnabled, variablesInResultEnabled);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorrelationMessageDto {\n");
        sb.append("    messageName: ").append(toIndentedString(messageName)).append("\n");
        sb.append("    businessKey: ").append(toIndentedString(businessKey)).append("\n");
        sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
        sb.append("    withoutTenantId: ").append(toIndentedString(withoutTenantId)).append("\n");
        sb.append("    processInstanceId: ").append(toIndentedString(processInstanceId)).append("\n");
        sb.append("    correlationKeys: ").append(toIndentedString(correlationKeys)).append("\n");
        sb.append("    localCorrelationKeys: ").append(toIndentedString(localCorrelationKeys)).append("\n");
        sb.append("    processVariables: ").append(toIndentedString(processVariables)).append("\n");
        sb.append("    processVariablesLocal: ").append(toIndentedString(processVariablesLocal)).append("\n");
        sb.append("    all: ").append(toIndentedString(all)).append("\n");
        sb.append("    resultEnabled: ").append(toIndentedString(resultEnabled)).append("\n");
        sb.append("    variablesInResultEnabled: ").append(toIndentedString(variablesInResultEnabled)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

