/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.camunda.rest.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * HistoricProcessInstanceDto
 */
@JsonPropertyOrder({
  HistoricProcessInstanceDto.JSON_PROPERTY_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_ROOT_PROCESS_INSTANCE_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_SUPER_CASE_INSTANCE_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_CASE_INSTANCE_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_PROCESS_DEFINITION_NAME,
  HistoricProcessInstanceDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY,
  HistoricProcessInstanceDto.JSON_PROPERTY_PROCESS_DEFINITION_VERSION,
  HistoricProcessInstanceDto.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_BUSINESS_KEY,
  HistoricProcessInstanceDto.JSON_PROPERTY_START_TIME,
  HistoricProcessInstanceDto.JSON_PROPERTY_END_TIME,
  HistoricProcessInstanceDto.JSON_PROPERTY_REMOVAL_TIME,
  HistoricProcessInstanceDto.JSON_PROPERTY_DURATION_IN_MILLIS,
  HistoricProcessInstanceDto.JSON_PROPERTY_START_USER_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_START_ACTIVITY_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_DELETE_REASON,
  HistoricProcessInstanceDto.JSON_PROPERTY_TENANT_ID,
  HistoricProcessInstanceDto.JSON_PROPERTY_STATE
})
@JsonTypeName("HistoricProcessInstanceDto")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen")
@Introspected
public class HistoricProcessInstanceDto {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_ROOT_PROCESS_INSTANCE_ID = "rootProcessInstanceId";
    private String rootProcessInstanceId;

    public static final String JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID = "superProcessInstanceId";
    private String superProcessInstanceId;

    public static final String JSON_PROPERTY_SUPER_CASE_INSTANCE_ID = "superCaseInstanceId";
    private String superCaseInstanceId;

    public static final String JSON_PROPERTY_CASE_INSTANCE_ID = "caseInstanceId";
    private String caseInstanceId;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_NAME = "processDefinitionName";
    private String processDefinitionName;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY = "processDefinitionKey";
    private String processDefinitionKey;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_VERSION = "processDefinitionVersion";
    private Integer processDefinitionVersion;

    public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
    private String processDefinitionId;

    public static final String JSON_PROPERTY_BUSINESS_KEY = "businessKey";
    private String businessKey;

    public static final String JSON_PROPERTY_START_TIME = "startTime";
    private OffsetDateTime startTime;

    public static final String JSON_PROPERTY_END_TIME = "endTime";
    private OffsetDateTime endTime;

    public static final String JSON_PROPERTY_REMOVAL_TIME = "removalTime";
    private OffsetDateTime removalTime;

    public static final String JSON_PROPERTY_DURATION_IN_MILLIS = "durationInMillis";
    private Long durationInMillis;

    public static final String JSON_PROPERTY_START_USER_ID = "startUserId";
    private String startUserId;

    public static final String JSON_PROPERTY_START_ACTIVITY_ID = "startActivityId";
    private String startActivityId;

    public static final String JSON_PROPERTY_DELETE_REASON = "deleteReason";
    private String deleteReason;

    public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
    private String tenantId;

    /**
     * Last state of the process instance, possible values are:  &#x60;ACTIVE&#x60; - running process instance  &#x60;SUSPENDED&#x60; - suspended process instances  &#x60;COMPLETED&#x60; - completed through normal end event  &#x60;EXTERNALLY_TERMINATED&#x60; - terminated externally, for instance through REST API  &#x60;INTERNALLY_TERMINATED&#x60; - terminated internally, for instance by terminating boundary event
     */
    public enum StateEnum {
        ACTIVE("ACTIVE"),
        SUSPENDED("SUSPENDED"),
        COMPLETED("COMPLETED"),
        EXTERNALLY_TERMINATED("EXTERNALLY_TERMINATED"),
        INTERNALLY_TERMINATED("INTERNALLY_TERMINATED");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }
    }
    public static final String JSON_PROPERTY_STATE = "state";
    private StateEnum state;

    public HistoricProcessInstanceDto() {
    }

    public HistoricProcessInstanceDto id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The id of the process instance.
     * @return id
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public HistoricProcessInstanceDto rootProcessInstanceId(String rootProcessInstanceId) {
        this.rootProcessInstanceId = rootProcessInstanceId;
        return this;
    }

    /**
     * The process instance id of the root process instance that initiated the process.
     * @return rootProcessInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_ROOT_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRootProcessInstanceId() {
        return rootProcessInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_ROOT_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRootProcessInstanceId(String rootProcessInstanceId) {
        this.rootProcessInstanceId = rootProcessInstanceId;
    }

    public HistoricProcessInstanceDto superProcessInstanceId(String superProcessInstanceId) {
        this.superProcessInstanceId = superProcessInstanceId;
        return this;
    }

    /**
     * The id of the parent process instance, if it exists.
     * @return superProcessInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSuperProcessInstanceId() {
        return superProcessInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSuperProcessInstanceId(String superProcessInstanceId) {
        this.superProcessInstanceId = superProcessInstanceId;
    }

    public HistoricProcessInstanceDto superCaseInstanceId(String superCaseInstanceId) {
        this.superCaseInstanceId = superCaseInstanceId;
        return this;
    }

    /**
     * The id of the parent case instance, if it exists.
     * @return superCaseInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SUPER_CASE_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSuperCaseInstanceId() {
        return superCaseInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_SUPER_CASE_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSuperCaseInstanceId(String superCaseInstanceId) {
        this.superCaseInstanceId = superCaseInstanceId;
    }

    public HistoricProcessInstanceDto caseInstanceId(String caseInstanceId) {
        this.caseInstanceId = caseInstanceId;
        return this;
    }

    /**
     * The id of the parent case instance, if it exists.
     * @return caseInstanceId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CASE_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCaseInstanceId() {
        return caseInstanceId;
    }

    @JsonProperty(JSON_PROPERTY_CASE_INSTANCE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCaseInstanceId(String caseInstanceId) {
        this.caseInstanceId = caseInstanceId;
    }

    public HistoricProcessInstanceDto processDefinitionName(String processDefinitionName) {
        this.processDefinitionName = processDefinitionName;
        return this;
    }

    /**
     * The name of the process definition that this process instance belongs to.
     * @return processDefinitionName
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionName() {
        return processDefinitionName;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionName(String processDefinitionName) {
        this.processDefinitionName = processDefinitionName;
    }

    public HistoricProcessInstanceDto processDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
        return this;
    }

    /**
     * The key of the process definition that this process instance belongs to.
     * @return processDefinitionKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionKey() {
        return processDefinitionKey;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionKey(String processDefinitionKey) {
        this.processDefinitionKey = processDefinitionKey;
    }

    public HistoricProcessInstanceDto processDefinitionVersion(Integer processDefinitionVersion) {
        this.processDefinitionVersion = processDefinitionVersion;
        return this;
    }

    /**
     * The version of the process definition that this process instance belongs to.
     * @return processDefinitionVersion
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getProcessDefinitionVersion() {
        return processDefinitionVersion;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionVersion(Integer processDefinitionVersion) {
        this.processDefinitionVersion = processDefinitionVersion;
    }

    public HistoricProcessInstanceDto processDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
        return this;
    }

    /**
     * The id of the process definition that this process instance belongs to.
     * @return processDefinitionId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessDefinitionId() {
        return processDefinitionId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessDefinitionId(String processDefinitionId) {
        this.processDefinitionId = processDefinitionId;
    }

    public HistoricProcessInstanceDto businessKey(String businessKey) {
        this.businessKey = businessKey;
        return this;
    }

    /**
     * The business key of the process instance.
     * @return businessKey
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_BUSINESS_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBusinessKey() {
        return businessKey;
    }

    @JsonProperty(JSON_PROPERTY_BUSINESS_KEY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBusinessKey(String businessKey) {
        this.businessKey = businessKey;
    }

    public HistoricProcessInstanceDto startTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * The time the instance was started. Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
     * @return startTime
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_START_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getStartTime() {
        return startTime;
    }

    @JsonProperty(JSON_PROPERTY_START_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    public HistoricProcessInstanceDto endTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * The time the instance ended. Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
     * @return endTime
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_END_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getEndTime() {
        return endTime;
    }

    @JsonProperty(JSON_PROPERTY_END_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
    }

    public HistoricProcessInstanceDto removalTime(OffsetDateTime removalTime) {
        this.removalTime = removalTime;
        return this;
    }

    /**
     * The time after which the instance should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.18/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
     * @return removalTime
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_REMOVAL_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getRemovalTime() {
        return removalTime;
    }

    @JsonProperty(JSON_PROPERTY_REMOVAL_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setRemovalTime(OffsetDateTime removalTime) {
        this.removalTime = removalTime;
    }

    public HistoricProcessInstanceDto durationInMillis(Long durationInMillis) {
        this.durationInMillis = durationInMillis;
        return this;
    }

    /**
     * The time the instance took to finish (in milliseconds).
     * @return durationInMillis
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DURATION_IN_MILLIS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getDurationInMillis() {
        return durationInMillis;
    }

    @JsonProperty(JSON_PROPERTY_DURATION_IN_MILLIS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDurationInMillis(Long durationInMillis) {
        this.durationInMillis = durationInMillis;
    }

    public HistoricProcessInstanceDto startUserId(String startUserId) {
        this.startUserId = startUserId;
        return this;
    }

    /**
     * The id of the user who started the process instance.
     * @return startUserId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_START_USER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getStartUserId() {
        return startUserId;
    }

    @JsonProperty(JSON_PROPERTY_START_USER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStartUserId(String startUserId) {
        this.startUserId = startUserId;
    }

    public HistoricProcessInstanceDto startActivityId(String startActivityId) {
        this.startActivityId = startActivityId;
        return this;
    }

    /**
     * The id of the initial activity that was executed (e.g., a start event).
     * @return startActivityId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_START_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getStartActivityId() {
        return startActivityId;
    }

    @JsonProperty(JSON_PROPERTY_START_ACTIVITY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStartActivityId(String startActivityId) {
        this.startActivityId = startActivityId;
    }

    public HistoricProcessInstanceDto deleteReason(String deleteReason) {
        this.deleteReason = deleteReason;
        return this;
    }

    /**
     * The provided delete reason in case the process instance was canceled during execution.
     * @return deleteReason
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DELETE_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDeleteReason() {
        return deleteReason;
    }

    @JsonProperty(JSON_PROPERTY_DELETE_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeleteReason(String deleteReason) {
        this.deleteReason = deleteReason;
    }

    public HistoricProcessInstanceDto tenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * The tenant id of the process instance.
     * @return tenantId
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTenantId() {
        return tenantId;
    }

    @JsonProperty(JSON_PROPERTY_TENANT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public HistoricProcessInstanceDto state(StateEnum state) {
        this.state = state;
        return this;
    }

    /**
     * Last state of the process instance, possible values are:  &#x60;ACTIVE&#x60; - running process instance  &#x60;SUSPENDED&#x60; - suspended process instances  &#x60;COMPLETED&#x60; - completed through normal end event  &#x60;EXTERNALLY_TERMINATED&#x60; - terminated externally, for instance through REST API  &#x60;INTERNALLY_TERMINATED&#x60; - terminated internally, for instance by terminating boundary event
     * @return state
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StateEnum getState() {
        return state;
    }

    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setState(StateEnum state) {
        this.state = state;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HistoricProcessInstanceDto historicProcessInstanceDto = (HistoricProcessInstanceDto) o;
        return Objects.equals(this.id, historicProcessInstanceDto.id) &&
            Objects.equals(this.rootProcessInstanceId, historicProcessInstanceDto.rootProcessInstanceId) &&
            Objects.equals(this.superProcessInstanceId, historicProcessInstanceDto.superProcessInstanceId) &&
            Objects.equals(this.superCaseInstanceId, historicProcessInstanceDto.superCaseInstanceId) &&
            Objects.equals(this.caseInstanceId, historicProcessInstanceDto.caseInstanceId) &&
            Objects.equals(this.processDefinitionName, historicProcessInstanceDto.processDefinitionName) &&
            Objects.equals(this.processDefinitionKey, historicProcessInstanceDto.processDefinitionKey) &&
            Objects.equals(this.processDefinitionVersion, historicProcessInstanceDto.processDefinitionVersion) &&
            Objects.equals(this.processDefinitionId, historicProcessInstanceDto.processDefinitionId) &&
            Objects.equals(this.businessKey, historicProcessInstanceDto.businessKey) &&
            Objects.equals(this.startTime, historicProcessInstanceDto.startTime) &&
            Objects.equals(this.endTime, historicProcessInstanceDto.endTime) &&
            Objects.equals(this.removalTime, historicProcessInstanceDto.removalTime) &&
            Objects.equals(this.durationInMillis, historicProcessInstanceDto.durationInMillis) &&
            Objects.equals(this.startUserId, historicProcessInstanceDto.startUserId) &&
            Objects.equals(this.startActivityId, historicProcessInstanceDto.startActivityId) &&
            Objects.equals(this.deleteReason, historicProcessInstanceDto.deleteReason) &&
            Objects.equals(this.tenantId, historicProcessInstanceDto.tenantId) &&
            Objects.equals(this.state, historicProcessInstanceDto.state);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, rootProcessInstanceId, superProcessInstanceId, superCaseInstanceId, caseInstanceId, processDefinitionName, processDefinitionKey, processDefinitionVersion, processDefinitionId, businessKey, startTime, endTime, removalTime, durationInMillis, startUserId, startActivityId, deleteReason, tenantId, state);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HistoricProcessInstanceDto {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    rootProcessInstanceId: ").append(toIndentedString(rootProcessInstanceId)).append("\n");
        sb.append("    superProcessInstanceId: ").append(toIndentedString(superProcessInstanceId)).append("\n");
        sb.append("    superCaseInstanceId: ").append(toIndentedString(superCaseInstanceId)).append("\n");
        sb.append("    caseInstanceId: ").append(toIndentedString(caseInstanceId)).append("\n");
        sb.append("    processDefinitionName: ").append(toIndentedString(processDefinitionName)).append("\n");
        sb.append("    processDefinitionKey: ").append(toIndentedString(processDefinitionKey)).append("\n");
        sb.append("    processDefinitionVersion: ").append(toIndentedString(processDefinitionVersion)).append("\n");
        sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
        sb.append("    businessKey: ").append(toIndentedString(businessKey)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    removalTime: ").append(toIndentedString(removalTime)).append("\n");
        sb.append("    durationInMillis: ").append(toIndentedString(durationInMillis)).append("\n");
        sb.append("    startUserId: ").append(toIndentedString(startUserId)).append("\n");
        sb.append("    startActivityId: ").append(toIndentedString(startActivityId)).append("\n");
        sb.append("    deleteReason: ").append(toIndentedString(deleteReason)).append("\n");
        sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

